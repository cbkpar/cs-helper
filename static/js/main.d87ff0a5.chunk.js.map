{"version":3,"sources":["components/Algorithm/Articles.js","components/Toc/Toc.js","components/Algorithm/Summary/Summary.js","components/Algorithm/Sort/BubbleSort.js","components/Algorithm/Sort/SelectionSort.js","components/Algorithm/Sort/InsertionSort.js","components/Algorithm/Sort/MergeSort.js","components/Algorithm/Sort/HeapSort.js","components/Algorithm/Sort/QuickSort.js","components/Algorithm/Sort/CountSort.js","components/Algorithm/Sort/RadixSort.js","components/Algorithm/Sort/Sort.js","components/Algorithm/Algorithm.js","components/Algorithm/index.js","components/Database/Articles.js","components/Database/Isolation/Isolation.js","components/Database/Isolation/index.js","components/Database/Lock/Lock.js","components/Database/Lock/index.js","components/Database/Database.js","components/Database/index.js","components/DataStructure/Articles.js","components/DataStructure/Basic/Basic.js","components/DataStructure/Basic/index.js","components/DataStructure/Array/Array.js","components/DataStructure/Array/index.js","components/DataStructure/Queue/Queue.js","components/DataStructure/Queue/index.js","components/DataStructure/Stack/Stack.js","components/DataStructure/Stack/index.js","components/DataStructure/Map/Map.js","components/DataStructure/Map/index.js","components/DataStructure/DataStructure.js","components/DataStructure/index.js","components/Header/Header.js","components/Home/Home.js","components/Router.js","App.js","reportWebVitals.js","index.js"],"names":["Articles","className","to","onClick","class","src","process","alt","Component","TOCBOT_OPTIONS","tocSelector","contentSelector","headingSelector","tocbot","window","require","Tocbot","init","destroy","React","Summary","id","title","frameborder","allow","allowfullscreen","href","target","userStyle","makeStyles","container","display","justifyContent","alignItems","height","border","borderRadius","bar","margin","txt","paddingTop","initArray","min","max","amount","arr","i","push","Math","floor","random","cmps","now","keyA","BubbleSort","props","classes","useState","Object","assign","masterArr","setArr","array","setArray","maxVal","setMaxVal","sortingIndex","setSortingIndex","Sort","keyB","length","j","setTimeout","tmp","map","value","index","style","background","width","Button","variant","fontWeight","e","preventDefault","masterCopy","SelectionSort","sortingIndexA","setSortingIndexA","sortingIndexB","setSortingIndexB","sortingIndexC","setSortingIndexC","idx","InsertionSort","later","delay","Promise","resolve","a","MergeSort","partition","left","right","mid","merge","l","r","cnt","HeapSort","heapify","n","t","swap","QuickSort","pivot","qsort","CountSort","count","setCount","mx","key","RadixSort","exp","bucket","num","gist","loadingClass","Algo","path","element","Isolation","Lock","Database","Basic","Array","Queue","Stack","Map","DataStructure","Header","changetab","setState","tabidx","state","location","pathname","includes","this","Home","basename","exact","App","Router","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d87ff0a5.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport './Articles.scss';\r\n\r\nclass Articles extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"algorithm_articles\">\r\n        <div className=\"container\">\r\n          <Link to=\"/Algorithm/Summary\" onClick=\"\">\r\n            <figure class=\"snip1200\">\r\n              <img src={process.env.PUBLIC_URL + '/img/Algorithm/Summary.png'} alt=\"Summary\" />\r\n              <figcaption>\r\n                <p>시간복잡도, 공간복잡도, Big-O 표기법</p>\r\n                <div class=\"heading\">\r\n                  <h2>알고리즘<span> 기초</span></h2>\r\n                </div>\r\n              </figcaption>\r\n            </figure>\r\n          </Link>\r\n          <Link to=\"/Algorithm/Sort\" onClick=\"\">\r\n            <figure class=\"snip1200\">\r\n              <img src={process.env.PUBLIC_URL + '/img/Algorithm/Sort.png'} alt=\"Sort\" />\r\n              <figcaption>\r\n                <p>버블 정렬, 선택 정렬, 삽입 정렬, 합병 정렬, 힙 정렬, 퀵 정렬, 계수 정렬, 기수 정렬</p>\r\n                <div class=\"heading\">\r\n                  <h2><span>정렬</span></h2>\r\n                </div>\r\n              </figcaption>\r\n            </figure>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Articles","import React from 'react'\r\nimport 'tocbot/dist/tocbot.css';\r\nimport './Toc.scss';\r\n\r\nconst TOCBOT_OPTIONS = {\r\n  tocSelector: '.js-toc',\r\n  contentSelector: '.js-toc-content',\r\n  headingSelector: 'h1, h2, h3'\r\n};\r\n\r\n// Only require tocbot if in browser.\r\nconst tocbot = (typeof window !== 'undefined')\r\n  ? require('tocbot/src/js/index')\r\n  : null;\r\n\r\nexport class Tocbot extends React.Component {\r\n  componentDidMount() {\r\n    if (tocbot) {\r\n      tocbot.init(TOCBOT_OPTIONS)\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (tocbot) {\r\n      tocbot.destroy()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return null\r\n  }\r\n}\r\n","import { Component, Fragment } from 'react';\r\nimport { Tocbot } from '../../Toc/Toc';\r\n\r\nclass Summary extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Fragment>\r\n          <main className=\"content\">\r\n            <div className=\"article-container container-lg\">\r\n              <article className=\"article-content js-toc-content\">\r\n                <h1 id=\"알고리즘\">알고리즘</h1>\r\n                <h2 id=\"정의\">정의</h2>\r\n                <p>\r\n                  문제를 해결하기 위한 여러 동작들의 모임이다. 유한성을 가지며, 언젠가는 끝나야 하는 속성을 가지고 있다. 수학과 컴퓨터 과학에서 알고리즘이란 작동이 일어나게 하는 내재하는 단계적 집합이다. 알고리즘은 연산, 데이터 진행 또는 자동화된 추론을 수행한다.\r\n                </p>\r\n                <h2 id=\"특징\">특징</h2>\r\n                <h3 id=\"입력\">입력</h3>\r\n                <p>\r\n                  입력되는 데이터는 0개 이상이어야 한다.\r\n                </p>\r\n                <h3 id=\"입력\">출력</h3>\r\n                <p>\r\n                  출력되는 데이터는 2개 이상이어야 한다.\r\n                </p>\r\n                <h3 id=\"명확성\">명확성</h3>\r\n                <p>\r\n                  알고리즘의 각 단계는 명확해야 한다.\r\n                </p>\r\n                <h3 id=\"유한성\">유한성</h3>\r\n                <p>\r\n                  알고리즘은 유한한 횟수후에 종료되어야 한다.\r\n                </p>\r\n                <h3 id=\"효율성\">효율성</h3>\r\n                <p>\r\n                  유한한 시간안에 정확하게 수행되어야 한다.\r\n                </p>\r\n                <h2 id=\"알고리즘 성능\">알고리즘 성능</h2>\r\n                <div className=\"video\"><iframe src=\"https://www.youtube.com/embed/4iqlPfhW17g\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\r\n                <h3 id=\"시간 복잡도\">시간 복잡도</h3>\r\n                <p>시간 복잡도(Time Complexity)는 해당 알고리즘을 수행하는데 필요한 연산의 횟수를 나타낸다.</p>\r\n                <p>연산의 횟수는 데이터의 수(n)에 따라 달라지며 <strong>T(n)</strong>으로 나타낸다.</p>\r\n                <h3 id=\"공간 복잡도\">공간 복잡도</h3>\r\n                <p>공간 복잡도(Space Complexity)는 프로그램을 실행시킨 후 완료까지 필요한 자원 공간의 크기를 나타낸다. </p>\r\n                <p>총 공간 [S(P)] = 고정 공간(c) + 가변 공간 S(n) </p>\r\n                <p>일반적으로 공간 복잡도와 시간 복잡도는 반비례 관계이다(trade-off)</p>\r\n                <p>일반적으로 공간보다 시간적인 부분이 중요하기 때문에 알고리즘에 고려되지 않는 편이다.</p>\r\n                <h2 id=\"점근적 표기법\">점근적 표기법</h2>\r\n                <h3 id=\"Big-O\">Big-O(상한 점근)</h3>\r\n                <p><strong>최악의 경우</strong>에서의 복잡도를 나타낸다.</p>\r\n                <p>알고리즘의 성능을 나타낼 때 가장 많이 사용 된다.</p>\r\n                <h3 id=\"Big-Ω\">Big-Ω(하한 점근)</h3>\r\n                <p><strong>최선의 경우</strong>에서의 복잡도를 나타낸다.</p>\r\n                <h3 id=\"Big-θ\">Big-θ(평균 점근)</h3>\r\n                <p><strong>평균적인 경우</strong>에서의 복잡도를 나타낸다.</p>\r\n                <h2 id=\"시간복잡도\">Big-O 시간 복잡도</h2>\r\n                <h3 id=\"시간복잡도비교\">시간 복잡도 비교</h3>\r\n                <img src={process.env.PUBLIC_URL + '/img/Algorithm/bigO.png'} alt=\"Big-O Complexity\" />\r\n                <p>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!)</p>\r\n                <div className=\"video\"><iframe src=\"https://www.youtube.com/embed/6Iq5iMCVsXA\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\r\n                <h3 id=\"O(1)\">O(1)</h3>\r\n                <p>데이터의 개수와 상관 없이 1번의 연산이 필요한 알고리즘</p>\r\n                <p>ex) 리스트의 크기 출력</p>\r\n                <h3 id=\"O(n)\">O(n)</h3>\r\n                <p>데이터의 개수에 비례한 만큼 연산이 필요한 알고리즘</p>\r\n                <p>ex) 리스트의 모든 수의 합 출력</p>\r\n                <h3 id=\"O(nlogn)\">O(nlogn)</h3>\r\n                <p>기본적으로 한번의 연산을 통해 2가지로 가지치기 할 수 있는 알고리즘</p>\r\n                <p>기본적으로 사용되는 퀵, 머지, 힙 정렬의 평균 시간복잡도에 해당된다.</p>\r\n                <p>퀵 정렬의 경우 최악의 경우 O(n^2)</p>\r\n                <p>ex) 최장 증가 부분 수열(LIS)</p>\r\n                <h3 id=\"O(n^2)\">O(n^2)</h3>\r\n                <p>데이터의 개수에 제곱한 만큼 연산이 필요한 알고리즘</p>\r\n                <p>ex) 구구단, 버블 정렬, 선택 정렬, 삽입 정렬</p>\r\n                <h3 id=\"O(n^3)\">O(n^3)</h3>\r\n                <p>데이터의 개수에 세제곱한 만큼 연산이 필요한 알고리즘</p>\r\n                <p>ex) 플로이드-와샬</p>\r\n                <h1 id=\"출처\">출처</h1>\r\n                <p><a href=\"https://opentutorials.org/course/2471/13912\" target=\"_blank\">프로그래밍 입문 - 알고리즘의 정의</a></p>\r\n                <p><a href=\"https://madplay.github.io/post/time-complexity-space-complexity\" target=\"_blank\">시간복잡도와 공간복잡도</a></p>\r\n                <p><a href=\"https://blog.naver.com/zzang9ha/221763516860\" target=\"_blank\">빅오(Big-O)표기법, 시간복잡도</a></p>\r\n              </article>\r\n              <div className=\"article-sidebar\">\r\n                <nav className=\"toc js-toc\">\r\n                </nav>\r\n              </div>\r\n            </div>\r\n            <Tocbot />\r\n          </main>\r\n        </Fragment>\r\n      </>\r\n    )\r\n  }\r\n}\r\nexport default Summary","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\n// This function from @material-ui/styles help create css\r\nconst userStyle = makeStyles({\r\n  container: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"flex-end\",\r\n    height: \"100%\",\r\n    border: \"2px solid #ff6d5c\",\r\n    borderRadius: \"5px\"\r\n  },\r\n  bar: {\r\n    margin: \"1px\",\r\n    borderRadius: \"3px\"\r\n  },\r\n  txt: {\r\n    margin: \"0px\",\r\n    paddingTop: \"5px\"\r\n  }\r\n});\r\n\r\n// Initializes a random array based on props given\r\nconst initArray = (min, max, amount) => {\r\n  let arr = [];\r\n  for (let i = 0; i < amount; i++)\r\n    arr.push(Math.floor(Math.random() * max) + min);\r\n  return arr;\r\n};\r\n\r\nlet cmps = 0;\r\nlet now = 0;\r\nlet keyA = 0;\r\n\r\n// Main sorting array. Change this for different algorithms.\r\nconst BubbleSort = props => {\r\n  // Make our styles first with useStyles()\r\n  const classes = userStyle();\r\n  // useState is used to create \"state\" variables in function\r\n  // components which have no state.\r\n  // It works like this:\r\n  // const [var, targetMethod] = useState(arg from targetMethod);\r\n  // Object.assign(target, source);\r\n  const [masterArr, setArr] = useState(Object.assign([], initArray(1, 100, 50)));\r\n  // This \"array\" var will hold the sorted array\r\n  const [array, setArray] = useState([]);\r\n  // Sets maximum value of array used for setting scale of bars.\r\n  const [maxVal, setMaxVal] = useState(0);\r\n  // sortingIndex is used to display bars.\r\n  const [sortingIndex, setSortingIndex] = useState(0);\r\n\r\n  // Use useEffect() in place of componentDidMount() and\r\n  // componentDidUpdate() to handle \"side effects\".\r\n  // Side effects are modifications to the DOM that you want to\r\n  // do after updating the DOM (render).\r\n\r\n  const start = (e) => {\r\n    e.preventDefault();\r\n    setArr(initArray(1, 100, 50));\r\n    setMaxVal(Math.max(...masterArr) + 1);\r\n    let masterCopy = Object.assign([], masterArr);\r\n    setArray(Object.assign([], masterCopy));\r\n    Sort(masterCopy);\r\n  }\r\n\r\n  // Bubblesort algorithm.\r\n  const Sort = arr => {\r\n    cmps = 0;\r\n    now = 0;\r\n    let keyB = ++keyA;\r\n    for (let i = 0; i < arr.length - 1; i++) {\r\n      for (let j = 0; j < arr.length - i - 1; j++) {\r\n        setTimeout(() => {\r\n          if(keyA!=keyB) return;\r\n          if (arr[j] > arr[j + 1]) {\r\n            let tmp = arr[j];\r\n            arr[j] = arr[j + 1];\r\n            arr[j + 1] = tmp;\r\n            cmps++;\r\n            setArray(Object.assign([], arr));\r\n          }\r\n          setSortingIndex(j);\r\n        }, 10*(now));\r\n        now++;\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    // JSX tag\r\n    <>\r\n      <h4 className={classes.txt}>교환 횟수: {cmps}</h4>\r\n      <div className={classes.container}>\r\n        {/* Maps each element of array with a value and index*/}\r\n        {array.map((value, index) => (\r\n          // Each bar is just a div.\r\n          <div\r\n            className={classes.bar}\r\n            style={{\r\n              background: sortingIndex === index-1 ? \"#ff005c\" : sortingIndex === index ? \"#ff6d5c\" : \"dodgerblue\",\r\n              width: `${100 / array.length}%`,\r\n              height: `${(value * 100) / maxVal}%`\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div>\r\n        <Button variant=\"outlined\" style={{\r\n              width: 100+\"%\",\r\n              fontWeight: 'bold'\r\n            }} onClick={start}>버블정렬 시작</Button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default BubbleSort;","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nconst userStyle = makeStyles({\r\n  container: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"flex-end\",\r\n    height: \"100%\",\r\n    border: \"2px solid #ff6d5c\",\r\n    borderRadius: \"5px\"\r\n  },\r\n  bar: {\r\n    margin: \"1px\",\r\n    borderRadius: \"3px\"\r\n  },\r\n  txt: {\r\n    margin: \"0px\",\r\n    paddingTop: \"5px\"\r\n  }\r\n});\r\n\r\nconst initArray = (min, max, amount) => {\r\n  let arr = [];\r\n  for (let i = 0; i < amount; i++)\r\n    arr.push(Math.floor(Math.random() * max) + min);\r\n  return arr;\r\n};\r\n\r\nlet cmps = 0;\r\nlet now = 0;\r\nlet keyA = 0;\r\n\r\nconst SelectionSort = props => {\r\n  const classes = userStyle();\r\n  const [masterArr, setArr] = useState(Object.assign([], initArray(1, 100, 50)));\r\n  const [array, setArray] = useState([]);\r\n  const [maxVal, setMaxVal] = useState(0);\r\n  const [sortingIndexA, setSortingIndexA] = useState(0);\r\n  const [sortingIndexB, setSortingIndexB] = useState(0);\r\n  const [sortingIndexC, setSortingIndexC] = useState(0);\r\n\r\n  const start = (e) => {\r\n    e.preventDefault();\r\n    setArr(initArray(1, 100, 50));\r\n    setMaxVal(Math.max(...masterArr) + 1);\r\n    let masterCopy = Object.assign([], masterArr);\r\n    setArray(Object.assign([], masterCopy));\r\n    Sort(masterCopy);\r\n  }\r\n\r\n  const Sort = arr => {\r\n    cmps = 0;\r\n    now = 0;\r\n    let keyB = ++keyA;\r\n    for (let i = 0; i < arr.length - 1; i++) {\r\n      let idx = i;\r\n      for (let j = i + 1; j < arr.length + 1; j++) {\r\n        setTimeout(() => {\r\n          if (keyA != keyB) return;\r\n          if (j === arr.length) {\r\n            if (i === idx) return;\r\n            let tmp = arr[i];\r\n            arr[i] = arr[idx];\r\n            arr[idx] = tmp;\r\n            setArray(Object.assign([], arr));\r\n            setSortingIndexA(i);\r\n            setSortingIndexB(idx);\r\n            setSortingIndexC(j);\r\n            return;\r\n          } else if (arr[j] < arr[idx]) {\r\n            idx = j;\r\n          }\r\n          cmps++;\r\n          setArray(Object.assign([], arr));\r\n          setSortingIndexA(i);\r\n          setSortingIndexB(idx);\r\n          setSortingIndexC(j);\r\n        }, 10 * (now));\r\n        now++;\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h4 className={classes.txt}>비교 횟수: {cmps}</h4>\r\n      <div className={classes.container}>\r\n        {array.map((value, index) => (\r\n          <div\r\n            className={classes.bar}\r\n            style={{\r\n              background: sortingIndexA === index ? \"#ff005c\" : sortingIndexB === index ? \"#ff6d00\" : sortingIndexC === index ? \"#ff6d5c\" : \"dodgerblue\",\r\n              width: `${100 / array.length}%`,\r\n              height: `${(value * 100) / maxVal}%`\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div>\r\n        <Button variant=\"outlined\" style={{\r\n          width: 100 + \"%\",\r\n          fontWeight: 'bold'\r\n        }} onClick={start}>선택정렬 시작</Button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default SelectionSort;","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nconst userStyle = makeStyles({\r\n  container: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"flex-end\",\r\n    height: \"100%\",\r\n    border: \"2px solid #ff6d5c\",\r\n    borderRadius: \"5px\"\r\n  },\r\n  bar: {\r\n    margin: \"1px\",\r\n    borderRadius: \"3px\"\r\n  },\r\n  txt: {\r\n    margin: \"0px\",\r\n    paddingTop: \"5px\"\r\n  }\r\n});\r\n\r\nconst initArray = (min, max, amount) => {\r\n  let arr = [];\r\n  for (let i = 0; i < amount; i++)\r\n    arr.push(Math.floor(Math.random() * max) + min);\r\n  return arr;\r\n};\r\n\r\nlet cmps = 0;\r\nlet keyA = 0;\r\n\r\nconst InsertionSort = props => {\r\n  const classes = userStyle();\r\n  const [masterArr, setArr] = useState(Object.assign([], initArray(1, 100, 50)));\r\n  const [array, setArray] = useState([]);\r\n  const [maxVal, setMaxVal] = useState(0);\r\n  const [sortingIndexA, setSortingIndexA] = useState(0);\r\n  const [sortingIndexB, setSortingIndexB] = useState(0);\r\n\r\n  const start = (e) => {\r\n    e.preventDefault();\r\n    setArr(initArray(1, 100, 50));\r\n    setMaxVal(Math.max(...masterArr) + 1);\r\n    let masterCopy = Object.assign([], masterArr);\r\n    setArray(Object.assign([], masterCopy));\r\n    Sort(masterCopy);\r\n  }\r\n\r\n  function later(delay) {\r\n    return new Promise(function (resolve) {\r\n      setTimeout(resolve, delay);\r\n    });\r\n  }\r\n\r\n  const Sort = async arr => {\r\n    cmps = 0;\r\n    let keyB = ++keyA;\r\n    for (let i = 1; i < arr.length; i++) {\r\n      let tmp = arr[i];\r\n      let j = i - 1;\r\n      while (j >= 0 && tmp < arr[j]) {\r\n        arr[j + 1] = arr[j];\r\n        await later(10);\r\n        if (keyA != keyB) return;\r\n        cmps++;\r\n        setArray(Object.assign([], arr));\r\n        setSortingIndexA(i);\r\n        setSortingIndexB(j);\r\n        j--;\r\n      }\r\n      arr[j + 1] = tmp;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h4 className={classes.txt}>비교 횟수: {cmps}</h4>\r\n      <div className={classes.container}>\r\n        {array.map((value, index) => (\r\n          <div\r\n            className={classes.bar}\r\n            style={{\r\n              background: sortingIndexA === index ? \"#ff005c\" : sortingIndexB === index ? \"#ff6d00\" : \"dodgerblue\",\r\n              width: `${100 / array.length}%`,\r\n              height: `${(value * 100) / maxVal}%`\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div>\r\n        <Button variant=\"outlined\" style={{\r\n          width: 100 + \"%\",\r\n          fontWeight: 'bold'\r\n        }} onClick={start}>삽입정렬 시작</Button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default InsertionSort;","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles, mergeClasses } from \"@material-ui/styles\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nconst userStyle = makeStyles({\r\n  container: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"flex-end\",\r\n    height: \"100%\",\r\n    border: \"2px solid #ff6d5c\",\r\n    borderRadius: \"5px\"\r\n  },\r\n  bar: {\r\n    margin: \"1px\",\r\n    borderRadius: \"3px\"\r\n  },\r\n  txt: {\r\n    margin: \"0px\",\r\n    paddingTop: \"5px\"\r\n  }\r\n});\r\n\r\nconst initArray = (min, max, amount) => {\r\n  let arr = [];\r\n  for (let i = 0; i < amount; i++)\r\n    arr.push(Math.floor(Math.random() * max) + min);\r\n  return arr;\r\n};\r\n\r\nlet cmps = 0;\r\nlet keyA = 0;\r\n\r\nconst MergeSort = props => {\r\n  const classes = userStyle();\r\n  const [masterArr, setArr] = useState(Object.assign([], initArray(1, 100, 50)));\r\n  const [array, setArray] = useState([]);\r\n  const [maxVal, setMaxVal] = useState(0);\r\n  const [sortingIndexA, setSortingIndexA] = useState(0);\r\n  const [sortingIndexB, setSortingIndexB] = useState(0);\r\n  const [sortingIndexC, setSortingIndexC] = useState(0);\r\n\r\n  const start = (e) => {\r\n    e.preventDefault();\r\n    setArr(initArray(1, 100, 50));\r\n    setMaxVal(Math.max(...masterArr) + 1);\r\n    let masterCopy = Object.assign([], masterArr);\r\n    setArray(Object.assign([], masterCopy));\r\n    Sort(masterCopy);\r\n  }\r\n\r\n  function later(delay) {\r\n    return new Promise(function (resolve) {\r\n      setTimeout(resolve, delay);\r\n    });\r\n  }\r\n\r\n  async function partition(arr, left, right, keyB) {\r\n    if (left == right) return;\r\n    let mid = Math.floor((left + right) / 2);\r\n    await partition(arr, left, mid, keyB);\r\n    await partition(arr, mid + 1, right, keyB);\r\n    await merge(arr, left, right, keyB);\r\n  }\r\n\r\n  async function merge(arr, left, right, keyB) {\r\n    let mid = Math.floor((left + right) / 2);\r\n    let l = left;\r\n    let r = mid + 1;\r\n    let tmp = [];\r\n    let cnt = 0;\r\n    while (l <= mid && r <= right) {\r\n      tmp.push(arr[l] <= arr[r] ? arr[l++] : arr[r++]);\r\n      cnt++;\r\n    }\r\n    while (l <= mid) tmp.push(arr[l++]);\r\n    while (r <= right) tmp.push(arr[r++]);\r\n    for (let i = 0; i < right - left + 1; i++) {\r\n      await later(50);\r\n      if (keyA != keyB) return;\r\n      if (cnt-- > 0) cmps++;\r\n      setSortingIndexA(left);\r\n      setSortingIndexB(left + i);\r\n      setSortingIndexC(right);\r\n      arr[left + i] = tmp[i];\r\n      setArray(Object.assign([], arr));\r\n    }\r\n    setArray(Object.assign([], arr));\r\n  }\r\n\r\n  const Sort = arr => {\r\n    cmps = 0;\r\n    let keyB = ++keyA;\r\n    partition(arr, 0, arr.length - 1, keyB);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h4 className={classes.txt}>비교 횟수: {cmps}</h4>\r\n      <div className={classes.container}>\r\n        {array.map((value, index) => (\r\n          <div\r\n            className={classes.bar}\r\n            style={{\r\n              background: sortingIndexA === index ? \"#ff005c\" : sortingIndexB === index ? \"#009900\" : sortingIndexC === index ? \"#ff6d00\" : \"dodgerblue\",\r\n              width: `${100 / array.length}%`,\r\n              height: `${(value * 100) / maxVal}%`\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div>\r\n        <Button variant=\"outlined\" style={{\r\n          width: 100 + \"%\",\r\n          fontWeight: 'bold'\r\n        }} onClick={start}>합병정렬 시작</Button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default MergeSort;","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles, mergeClasses } from \"@material-ui/styles\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nconst userStyle = makeStyles({\r\n  container: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"flex-end\",\r\n    height: \"100%\",\r\n    border: \"2px solid #ff6d5c\",\r\n    borderRadius: \"5px\"\r\n  },\r\n  bar: {\r\n    margin: \"1px\",\r\n    borderRadius: \"3px\"\r\n  },\r\n  txt: {\r\n    margin: \"0px\",\r\n    paddingTop: \"5px\"\r\n  }\r\n});\r\n\r\nconst initArray = (min, max, amount) => {\r\n  let arr = [];\r\n  for (let i = 0; i < amount; i++)\r\n    arr.push(Math.floor(Math.random() * max) + min);\r\n  return arr;\r\n};\r\n\r\nlet cmps = 0;\r\nlet keyA = 0;\r\n\r\nconst HeapSort = props => {\r\n  const classes = userStyle();\r\n  const [masterArr, setArr] = useState(Object.assign([], initArray(1, 100, 50)));\r\n  const [array, setArray] = useState([]);\r\n  const [maxVal, setMaxVal] = useState(0);\r\n  const [sortingIndexA, setSortingIndexA] = useState(0);\r\n  const [sortingIndexB, setSortingIndexB] = useState(0);\r\n  const [sortingIndexC, setSortingIndexC] = useState(0);\r\n\r\n  const start = (e) => {\r\n    e.preventDefault();\r\n    setArr(initArray(1, 100, 50));\r\n    setMaxVal(Math.max(...masterArr) + 1);\r\n    let masterCopy = Object.assign([], masterArr);\r\n    setArray(Object.assign([], masterCopy));\r\n    Sort(masterCopy);\r\n  }\r\n\r\n  function later(delay) {\r\n    return new Promise(function (resolve) {\r\n      setTimeout(resolve, delay);\r\n    });\r\n  }\r\n\r\n  async function heapify(arr, n, idx, keyB) {\r\n    await later(50);\r\n    if (keyA != keyB) return;\r\n    let t = idx;\r\n    let l = idx * 2 + 1;\r\n    let r = idx * 2 + 2;\r\n    setSortingIndexA(t);\r\n    setSortingIndexB(l);\r\n    setSortingIndexC(r);\r\n    cmps++;\r\n    if (l < n && arr[t] < arr[l]) t = l;\r\n    if (r < n && arr[t] < arr[r]) t = r;\r\n    if (t == idx) return;\r\n    await swap(arr, t, idx, keyB);\r\n    await heapify(arr, n, t, keyB);\r\n    setArray(Object.assign([], arr));\r\n  }\r\n\r\n  function swap(arr, left, right, keyB) {\r\n    if (keyA != keyB) return;\r\n    let tmp = arr[left];\r\n    arr[left] = arr[right];\r\n    arr[right] = tmp;\r\n  }\r\n\r\n  const Sort = async arr => {\r\n    cmps = 0;\r\n    let keyB = ++keyA;\r\n    let n = arr.length;\r\n    for (let i = Math.floor(n / 2) - 1; i >= 0; i--) await heapify(arr, n, i, keyB);\r\n    for (let i = n - 1; i > 0; i--) {\r\n      await swap(arr, 0, i, keyB);\r\n      await heapify(arr, i, 0, keyB);\r\n    }\r\n\r\n    setArray(Object.assign([], arr));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h4 className={classes.txt}>비교 횟수: {cmps}</h4>\r\n      <div className={classes.container}>\r\n        {array.map((value, index) => (\r\n          <div\r\n            className={classes.bar}\r\n            style={{\r\n              background: sortingIndexA === index ? \"#ff005c\" : sortingIndexB === index ? \"#009900\" : sortingIndexC === index ? \"#ff6d00\" : \"dodgerblue\",\r\n              width: `${100 / array.length}%`,\r\n              height: `${(value * 100) / maxVal}%`\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div>\r\n        <Button variant=\"outlined\" style={{\r\n          width: 100 + \"%\",\r\n          fontWeight: 'bold'\r\n        }} onClick={start}>힙정렬 시작</Button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default HeapSort;","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles, mergeClasses } from \"@material-ui/styles\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nconst userStyle = makeStyles({\r\n  container: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"flex-end\",\r\n    height: \"100%\",\r\n    border: \"2px solid #ff6d5c\",\r\n    borderRadius: \"5px\"\r\n  },\r\n  bar: {\r\n    margin: \"1px\",\r\n    borderRadius: \"3px\"\r\n  },\r\n  txt: {\r\n    margin: \"0px\",\r\n    paddingTop: \"5px\"\r\n  }\r\n});\r\n\r\nconst initArray = (min, max, amount) => {\r\n  let arr = [];\r\n  for (let i = 0; i < amount; i++)\r\n    arr.push(Math.floor(Math.random() * max) + min);\r\n  return arr;\r\n};\r\n\r\nlet cmps = 0;\r\nlet keyA = 0;\r\n\r\nconst QuickSort = props => {\r\n  const classes = userStyle();\r\n  const [masterArr, setArr] = useState(Object.assign([], initArray(1, 100, 50)));\r\n  const [array, setArray] = useState([]);\r\n  const [maxVal, setMaxVal] = useState(0);\r\n  const [sortingIndexA, setSortingIndexA] = useState(0);\r\n  const [sortingIndexB, setSortingIndexB] = useState(0);\r\n  const [sortingIndexC, setSortingIndexC] = useState(0);\r\n\r\n  const start = (e) => {\r\n    e.preventDefault();\r\n    setArr(initArray(1, 100, 50));\r\n    setMaxVal(Math.max(...masterArr) + 1);\r\n    let masterCopy = Object.assign([], masterArr);\r\n    setArray(Object.assign([], masterCopy));\r\n    Sort(masterCopy);\r\n  }\r\n\r\n  function later(delay) {\r\n    return new Promise(function (resolve) {\r\n      setTimeout(resolve, delay);\r\n    });\r\n  }\r\n\r\n  async function partition(arr, left, right, keyB) {\r\n    await later(50);\r\n    if (keyA != keyB) return;\r\n    let mid = Math.floor((left+right) / 2);\r\n    setSortingIndexA(mid);\r\n    let pivot = arr[mid];\r\n    while (left <= right) {\r\n      while (arr[left] < pivot){\r\n        await later(50);\r\n        if (keyA != keyB) return;\r\n        cmps++;\r\n        setSortingIndexB(left);\r\n        left++;\r\n      } \r\n      while (arr[right] > pivot){\r\n        await later(50);\r\n        if (keyA != keyB) return;\r\n        cmps++;\r\n        setSortingIndexC(right);\r\n        right--;\r\n      }\r\n      if (left <= right) swap(arr, left++, right--, keyB);\r\n      setArray(Object.assign([], arr));\r\n    }\r\n    return left;\r\n  }\r\n\r\n  async function qsort(arr, left, right, keyB) {\r\n    if (left >= right) return;\r\n    let mid = await partition(arr, left, right, keyB);\r\n    await qsort(arr, left, mid - 1, keyB);\r\n    await qsort(arr, mid, right, keyB);\r\n  }\r\n\r\n  function swap(arr, left, right, keyB) {\r\n    if (keyA != keyB) return;\r\n    let tmp = arr[left];\r\n    arr[left] = arr[right];\r\n    arr[right] = tmp;\r\n  }\r\n\r\n  const Sort = async arr => {\r\n    cmps = 0;\r\n    let keyB = ++keyA;\r\n    await qsort(arr, 0, arr.length - 1, keyB);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h4 className={classes.txt}>비교 횟수: {cmps}</h4>\r\n      <div className={classes.container}>\r\n        {array.map((value, index) => (\r\n          <div\r\n            className={classes.bar}\r\n            style={{\r\n              background: sortingIndexA === index ? \"#ff005c\" : sortingIndexB === index ? \"#009900\" : sortingIndexC === index ? \"#ff6d00\" : \"dodgerblue\",\r\n              width: `${100 / array.length}%`,\r\n              height: `${(value * 100) / maxVal}%`\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div>\r\n        <Button variant=\"outlined\" style={{\r\n          width: 100 + \"%\",\r\n          fontWeight: 'bold'\r\n        }} onClick={start}>퀵정렬 시작</Button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default QuickSort;","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles, mergeClasses } from \"@material-ui/styles\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nconst userStyle = makeStyles({\r\n  container: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"flex-end\",\r\n    height: \"100%\",\r\n    border: \"2px solid #ff6d5c\",\r\n    borderRadius: \"5px\"\r\n  },\r\n  bar: {\r\n    margin: \"1px\",\r\n    borderRadius: \"3px\"\r\n  },\r\n  txt: {\r\n    margin: \"0px\",\r\n    paddingTop: \"5px\"\r\n  }\r\n});\r\n\r\nconst initArray = (min, max, amount) => {\r\n  let arr = [];\r\n  for (let i = 0; i < amount; i++)\r\n    arr.push(Math.floor(Math.random() * max) + min);\r\n  return arr;\r\n};\r\n\r\nlet keyA = 0;\r\n\r\nconst CountSort = props => {\r\n  const classes = userStyle();\r\n  const [masterArr, setArr] = useState(Object.assign([], initArray(1, 10, 50)));\r\n  const [array, setArray] = useState([]);\r\n  const [count, setCount] = useState([0]);\r\n  const [maxVal, setMaxVal] = useState(0);\r\n  const [sortingIndexA, setSortingIndexA] = useState(0);\r\n  const [sortingIndexB, setSortingIndexB] = useState(-1);\r\n\r\n  const start = (e) => {\r\n    e.preventDefault();\r\n    setArr(initArray(1, 10, 50));\r\n    setMaxVal(Math.max(...masterArr) + 1);\r\n    let masterCopy = Object.assign([], masterArr);\r\n    setArray(Object.assign([], masterCopy));\r\n    Sort(masterCopy);\r\n  }\r\n\r\n  function later(delay) {\r\n    return new Promise(function (resolve) {\r\n      setTimeout(resolve, delay);\r\n    });\r\n  }\r\n\r\n  const Sort = async arr => {\r\n    setSortingIndexA(-1);\r\n    setSortingIndexB(-1);\r\n    let keyB = ++keyA;\r\n    const mx = Math.max(...arr);\r\n    let n = arr.length;\r\n    let count = [0];\r\n    for (let i = 0; i < mx; i++) count.push(0);\r\n    for (let i = 0; i < n; i++) {\r\n      await later(50);\r\n      if (keyA != keyB) return;\r\n      count[arr[i]]++;\r\n      setCount(Object.assign([], count));\r\n      setSortingIndexA(i);\r\n    }\r\n    let idx = 0;\r\n    for (let i = 1; i <= mx; i++) {\r\n      await later(50);\r\n      if (keyA != keyB) return;\r\n      while (true) {\r\n        if (count[i] <= 0) break;\r\n        await later(50);\r\n        if (keyA != keyB) return;\r\n        setSortingIndexB(idx);\r\n        arr[idx++] = i;\r\n        setArray(Object.assign([], arr));\r\n        count[i]--;\r\n        setCount(Object.assign([], count));\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h4 className={classes.txt}>Count 배열 : {count.map((value, key) => value + ' ')}</h4>\r\n      <div className={classes.container}>\r\n        {array.map((value, index) => (\r\n          <div\r\n            className={classes.bar}\r\n            style={{\r\n              background: sortingIndexA === index ? \"#ff005c\" : sortingIndexB === index ? \"#009900\" : \"dodgerblue\",\r\n              width: `${100 / array.length}%`,\r\n              height: `${(value * 100) / maxVal}%`\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div>\r\n        <Button variant=\"outlined\" style={{\r\n          width: 100 + \"%\",\r\n          fontWeight: 'bold'\r\n        }} onClick={start}>계수정렬 시작</Button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default CountSort;","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles, mergeClasses } from \"@material-ui/styles\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nconst userStyle = makeStyles({\r\n  container: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"flex-end\",\r\n    height: \"100%\",\r\n    border: \"2px solid #ff6d5c\",\r\n    borderRadius: \"5px\"\r\n  },\r\n  bar: {\r\n    margin: \"1px\",\r\n    borderRadius: \"3px\"\r\n  },\r\n  txt: {\r\n    margin: \"0px\",\r\n    paddingTop: \"5px\"\r\n  }\r\n});\r\n\r\nconst initArray = (min, max, amount) => {\r\n  let arr = [];\r\n  for (let i = 0; i < amount; i++)\r\n    arr.push(Math.floor(Math.random() * max) + min);\r\n  return arr;\r\n};\r\n\r\nlet keyA = 0;\r\n\r\nconst RadixSort = props => {\r\n  const classes = userStyle();\r\n  const [masterArr, setArr] = useState(Object.assign([], initArray(1, 999, 50)));\r\n  const [array, setArray] = useState([]);\r\n  const [bucket, setBucket] = useState([]);\r\n  const [maxVal, setMaxVal] = useState(0);\r\n  const [sortingIndexA, setSortingIndexA] = useState(0);\r\n\r\n  const start = (e) => {\r\n    e.preventDefault();\r\n    setArr(initArray(1, 999, 50));\r\n    setMaxVal(Math.max(...masterArr) + 1);\r\n    let masterCopy = Object.assign([], masterArr);\r\n    setArray(Object.assign([], masterCopy));\r\n    Sort(masterCopy);\r\n  }\r\n\r\n  function later(delay) {\r\n    return new Promise(function (resolve) {\r\n      setTimeout(resolve, delay);\r\n    });\r\n  }\r\n\r\n  const Sort = async arr => {\r\n    setSortingIndexA(-1);\r\n    let keyB = ++keyA;\r\n    const mx = Math.max(...arr);\r\n    let n = arr.length;\r\n    let exp = 1;\r\n    while(mx >= exp) {\r\n      let bucket = [];\r\n      for(let i=0;i<10;i++) bucket.push([]);\r\n      for(let i =0;i<n;i++){\r\n        let num = (Math.floor(arr[i]/exp))%10;\r\n        bucket[num].push(arr[i]);\r\n      }\r\n      exp *= 10;\r\n      let idx = 0;\r\n      for(let i=0;i<10;i++){\r\n        for(let j=0;j<bucket[i].length;j++){\r\n          await later(50);\r\n          if (keyA != keyB) return;\r\n          setSortingIndexA(idx);\r\n          arr[idx++] = bucket[i][j];\r\n          setArray(Object.assign([], arr));\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h4 className={classes.txt}></h4>\r\n      <div className={classes.container}>\r\n        {array.map((value, index) => (\r\n          <div\r\n            className={classes.bar}\r\n            style={{\r\n              background: sortingIndexA === index ? \"#ff005c\" : \"dodgerblue\",\r\n              width: `${100 / array.length}%`,\r\n              height: `${(value * 100) / maxVal}%`\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div>\r\n        <Button variant=\"outlined\" style={{\r\n          width: 100 + \"%\",\r\n          fontWeight: 'bold'\r\n        }} onClick={start}>기수정렬 시작</Button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default RadixSort;","import { Component, Fragment } from 'react';\r\nimport { Tocbot } from '../../Toc/Toc';\r\nimport ReactEmbedGist from 'react-embed-gist';\r\nimport BubbleSort from './BubbleSort';\r\nimport SelectionSort from './SelectionSort';\r\nimport InsertionSort from './InsertionSort';\r\nimport MergeSort from './MergeSort';\r\nimport HeapSort from './HeapSort';\r\nimport QuickSort from './QuickSort';\r\nimport CountSort from './CountSort';\r\nimport RadixSort from './RadixSort';\r\nimport './Sort.scss';\r\n\r\nclass Sort extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Fragment>\r\n          <main className=\"content\">\r\n            <div className=\"article-container container-lg\">\r\n              <article className=\"article-content js-toc-content\">\r\n                <h1 id=\"정렬\">정렬</h1>\r\n                <h2 id=\"비교식정렬\">비교식 정렬</h2>\r\n                <p>\r\n                  각 값을 2개씩 비교하여 교환하는 방법으로 정렬\r\n                </p>\r\n                <h3 id=\"버블정렬\">버블 정렬</h3>\r\n                <p>서로 <strong>인접한</strong> 값을 비교하며 순서대로 되어 있지 않으면 서로 교환한다.</p>\r\n                <div className=\"sortchart\">\r\n                  <BubbleSort />\r\n                </div>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/3d72219d1df78c00a5cc63249517a2c3\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h3 id=\"선택정렬\">선택 정렬</h3>\r\n                <p>데이터에서 가장 작은 값을 선택하여 가장 앞의 데이터와 교환 해나간다.</p>\r\n                <img src={process.env.PUBLIC_URL + '/img/Algorithm/selection-sort.png'} alt=\"selection-sort\" />\r\n                <div className=\"sortchart\">\r\n                  <SelectionSort />\r\n                </div>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/995cd825e90797bb7c1afc658a31dbc7\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h3 id=\"삽입정렬\">삽입 정렬</h3>\r\n                <p>앞에서부터 차례대로 이미 정렬된 배열 부분과 비교하여, 자신의 위치를 찾아 삽입함으로써 정렬을 완성하는 알고리즘</p>\r\n                <img src={process.env.PUBLIC_URL + '/img/Algorithm/insert-sort.png'} alt=\"insert-sort\" />\r\n                <div className=\"sortchart\">\r\n                  <InsertionSort />\r\n                </div>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/91a3f5529b86573f37fbec320e18b481\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h3 id=\"병합정렬\">합병 정렬</h3>\r\n                <p>분할 정복(Divide and Conquer)의 방법을 사용하여 정렬</p>\r\n                <img src={process.env.PUBLIC_URL + '/img/Algorithm/merge-sort.png'} alt=\"merge-sort\" />\r\n                <p>주어진 배열을 더이상 쪼갤 수 없을 때 까지 쪼갠 후에 하나로 합치며 정렬한다.</p>\r\n                <div className=\"video\"><iframe src=\"https://www.youtube.com/embed/QAyl79dCO_k\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\r\n                <div className=\"sortchart\">\r\n                  <MergeSort />\r\n                </div>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/ea75edc6bbc7baabd233763ac3ce63b9\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h3 id=\"힙정렬\">힙 정렬</h3>\r\n                <p>힙 정렬은 <strong>힙 트리 구조</strong>를 이용하는 정렬 방법이다. </p>\r\n                <p>힙 정렬을 수행하기 전에 우선 <strong>최대 힙 생성 알고리즘</strong>을 사용한다.</p>\r\n                <p>최대 힙 생성 알고리즘은 특정한 노드의 두 자식중 더 큰 자식과 자신의 위치를 바꾸는 알고리즘</p>\r\n                <p>힙의 루트에는 항상 가장 큰 값이 들어가게 되므로 배열의 n번째 값과 치환하며 힙정렬을 수행한다</p>\r\n                <p>한번 수행할때마다 n을 1씩 줄여가며 n이 0보다 클때까지 진행한다</p>\r\n                <div className=\"video\"><iframe src=\"https://www.youtube.com/embed/iyl9bfp_8ag\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\r\n                <img src={process.env.PUBLIC_URL + '/img/Algorithm/heap-sort.png'} alt=\"heap-sort\" />\r\n                <div className=\"sortchart\">\r\n                  <HeapSort />\r\n                </div>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/3f67e30f7e8a20b6b30729adc0353efd\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h3 id=\"퀵정렬\">퀵 정렬</h3>\r\n                <p>분할 정복과 재귀를 이용하여 정렬하는 알고리즘</p>\r\n                <p>평균적으로 O(nlogn)이지만 최악의 경우 O(n^2)이다.</p>\r\n                <img src={process.env.PUBLIC_URL + '/img/Algorithm/quick-sort.png'} alt=\"quick-sort\" />\r\n                <p>리스트 가운데서 하나의 원소를 고르고 피벗이라 한다</p>\r\n                <p>피벗 앞은 피벗보다 값이 작은 원소, 피벗 뒤는 값이 큰 원소로 나눈다.</p>\r\n                <p>재귀적으로 위 방법을 반복하여 리스트의 크기가 1과 같거나 작을때까지 반복한다.</p>\r\n                <p>재귀 호출이 한번 진행 될 때마다 최소 하나 이상의 원소 위치가 정해지므로 유한성이 보장된다.</p>\r\n                <div className=\"video\"><iframe width=\"1280\" height=\"720\" src=\"https://www.youtube.com/embed/7BDzle2n47c\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\r\n                <div className=\"sortchart\">\r\n                  <QuickSort />\r\n                </div>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/45af66146c58c003fc74c1ee8b189749\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h2 id=\"분산식정렬\">분산식 정렬</h2>\r\n                <p>\r\n                  값들을 여러개의 부분 집합으로 분해하고 정렬하여 전체를 정렬하는 방법\r\n                </p>\r\n                <h3 id=\"계수정렬\">계수 정렬</h3>\r\n                <p>값의 범위가 크지 않고 데이터의 수가 클 때 유용한 정렬방법</p>\r\n                <p>원소의 범위 크기에 해당하는 배열을 만들고 데이터의 값을 넣고 개수를 세서 정렬</p>\r\n                <p>시간복잡도 : O(n+k) [n : 데이터의 수, k : 데이터의 범위]</p>\r\n                <div className=\"sortchart\">\r\n                  <CountSort />\r\n                </div>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/7328e3cc3c07095efcc15d00d13ae697\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h3 id=\"기수정렬\">기수 정렬</h3>\r\n                <p>기수 별로 비교 없이 정렬하는 방법</p>\r\n                <p>기수란 집합의 크기를 나타내는 수이다</p>\r\n                <p>크기가 유한하고 사전순으로 정렬할 수 있어야 한다</p>\r\n                <p>부동소수점 실수일때는 적용이 불가능하다</p>\r\n                <p>시간복잡도 : O(nw) [n : 데이터의 수, w : 데이터 최대값의 길이]</p>\r\n                <img src={process.env.PUBLIC_URL + '/img/Algorithm/radix-sort.png'} alt=\"radix-sort\" />\r\n                <div className=\"sortchart\">\r\n                  <RadixSort />\r\n                </div>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/7e2c7b8a562d661e8284d4955e66a002\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h2 id=\"시간복잡도비교\">시간복잡도 비교</h2>\r\n                <img src={process.env.PUBLIC_URL + '/img/Algorithm/sort-time-complexity2.png'} alt=\"Sort-complexity\" />\r\n                <p>버블, 선택, 삽입 정렬의 경우 모두 시간복잡도가 O(n^2) 이지만 평균적으로는 삽입정렬이 그중 가장 효율이 좋다.</p>\r\n                <img src={process.env.PUBLIC_URL + '/img/Algorithm/sort-time-complexity.png'} alt=\"Sort-complexity\" />\r\n                <p>\r\n                  다양한 정렬을\r\n                  <a href=\"https://www.toptal.com/developers/sorting-algorithms\" target=\"_blank\"><strong> [여기] </strong></a>\r\n                  에서 애니메이션으로 비교해 볼 수 있다.\r\n                </p>\r\n                <h2 id=\"안정정렬\">안정 정렬</h2>\r\n                <p>동일한 값에 대해 기존의 순서가 유지되는 정렬 방식</p>\r\n                <p>버블, 삽입, 병합 정렬</p>\r\n                <p>ex) 1 5 2 1* 4 3 → 1 1* 2 3 4 5</p>\r\n                <h2 id=\"불안정정렬\">불안정 정렬</h2>\r\n                <p>동일한 값에 대해 기존의 순서가 바뀔수 있는 정렬 방식</p>\r\n                <p>선택, 힙, 퀵 정렬</p>\r\n                <p>ex) 1 5 2 1* 4 3 → 1* 1 2 3 4 5</p>\r\n                <h1 id=\"출처\">출처</h1>\r\n                <p><a href=\"https://medium.com/@joongwon/%EC%A0%95%EB%A0%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B8%B0%EC%B4%88-805391cb088e\" target=\"_blank\">정렬 알고리즘의 기초</a></p>\r\n                <p><a href=\"https://gmlwjd9405.github.io/2018/05/06/algorithm-selection-sort.html\" target=\"_blank\">선택 정렬 이란</a></p>\r\n                <p><a href=\"https://velog.io/@dongchyeon/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%82%BD%EC%9E%85-%EC%A0%95%EB%A0%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-gnrmum6r\" target=\"_blank\">[알고리즘] 삽입 정렬 알고리즘</a></p>\r\n                <p><a href=\"https://st-lab.tistory.com/233\" target=\"_blank\">자바 [JAVA] - 합병정렬 / 병합정렬 (Merge Sort)</a></p>\r\n                <p><a href=\"https://blog.naver.com/ndb796/221228342808\" target=\"_blank\">힙 정렬(Heap Sort)</a></p>\r\n                <p><a href=\"https://www.daleseo.com/sort-quick/\" target=\"_blank\">[알고리즘] 퀵 정렬 - Quick Sort (Python, Java)</a></p>\r\n                <p><a href=\"https://ko.wikipedia.org/wiki/%ED%80%B5_%EC%A0%95%EB%A0%AC\" target=\"_blank\">위키백과 - 퀵 정렬</a></p>\r\n              </article>\r\n              <div className=\"article-sidebar\">\r\n                <nav className=\"toc js-toc\">\r\n                </nav>\r\n              </div>\r\n            </div>\r\n            <Tocbot />\r\n          </main>\r\n        </Fragment>\r\n      </>\r\n    )\r\n  }\r\n}\r\nexport default Sort","import React, { Component } from 'react'\r\nimport { Route, Routes } from \"react-router-dom\";\r\nimport Articles from './Articles';\r\nimport Summary from './Summary/Summary'\r\nimport Sort from './Sort/Sort'\r\n\r\nclass Algo extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Routes>\r\n          <Route path='/' element={<Articles />} />\r\n          <Route path='/Summary/*' element={<Summary />} />\r\n          <Route path='/Sort/*' element={<Sort />} />\r\n        </Routes>\r\n      </>\r\n    )\r\n  }\r\n}\r\nexport default Algo","import Algo from \"./Algorithm\";\r\n\r\nexport default Algo;","import React, { Component } from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport './Articles.scss';\r\n\r\nclass Articles extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"database_articles\">\r\n        <div className=\"container\">\r\n          <Link to=\"/Database/Lock\" onClick=\"\">\r\n            <figure class=\"snip1200\">\r\n              <img src={process.env.PUBLIC_URL + '/img/Database/Lock.png'} alt=\"Lock\" />\r\n              <figcaption>\r\n                <p>Transaction, Shared Lock, Exclusive Lock</p>\r\n                <div class=\"heading\">\r\n                  <h2><span>DB Lock</span></h2>\r\n                </div>\r\n              </figcaption>\r\n            </figure>\r\n          </Link>\r\n          <Link to=\"/Database/Isolation\" onClick=\"\">\r\n            <figure class=\"snip1200\">\r\n              <img src={process.env.PUBLIC_URL + '/img/Database/Isolation.png'} alt=\"Isolation\" />\r\n              <figcaption>\r\n                <p>Read Uncommitted, Read Committed, Repeatable Read, Serializable</p>\r\n                <div class=\"heading\">\r\n                  <h2><span>격리 수준</span></h2>\r\n                </div>\r\n              </figcaption>\r\n            </figure>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Articles","import { Component, Fragment } from 'react';\r\nimport { Tocbot } from '../../Toc/Toc';\r\n\r\nclass Isolation extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Fragment>\r\n          <main className=\"content\">\r\n            <div className=\"article-container container-lg\">\r\n              <article className=\"article-content js-toc-content\">\r\n                <h1 id=\"격리수준\">격리 수준</h1>\r\n                <p>트랜잭션끼리 얼마나 서로 격리되어 있는지를 나타낸다</p>\r\n                <div className=\"video\"><iframe src=\"https://www.youtube.com/embed/poyjLx-LOEU\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\r\n                <h2 id=\"동시성과무결성\">동시성과 무결성</h2>\r\n                <p>격리 수준은 동시성과 무결성에 연관되어 있다.</p>\r\n                <p>동시성을 높이면 무결성에 문제가 생기게 되고</p>\r\n                <p>무결성을 유지하면 동시성에 문제가 생기게 된다</p>\r\n                <h2 id=\"ReadUncommitted\">Read Uncommitted</h2>\r\n                <p>0 레벨 수준의 격리</p>\r\n                <p>SELECT 문이 수행되는 동안 <strong>Shared Lock</strong>이 걸리지 않음</p>\r\n                <p><strong>Dirty Read</strong>, Non-Repeatable Read, Phantom Read 발생</p>\r\n                <h2 id=\"ReadCommitted\">Read Committed</h2>\r\n                <p>1 레벨 수준의 격리</p>\r\n                <p>트랜잭션의 변경내용이 Commit이 되어야 다른 트랜잭션에서 조회된다</p>\r\n                <p>SELECT 문이 수행되는 동안 <strong>Shared Lock</strong>이 걸린다.</p>\r\n                <p>Oracle에서 기본적으로 사용되는 Isolation Level 이다.</p>\r\n                <p><strong>Non-Repeatable Read</strong>, Phantom Read 발생</p>\r\n                <h2 id=\"RepeatableRead\">Repeatable Read</h2>\r\n                <p>2 레벨 수준의 격리</p>\r\n                <p>해당 트랜잭션보다 이전 트랜잭션의 커밋된 내용만 조회 가능하다</p>\r\n                <p>Mysql에서 기본적으로 사용되는 Isolation Level 이다.</p>\r\n                <p><strong>Phantom Read</strong> 발생</p>\r\n                <h2 id=\"Serializable\">Serializable</h2>\r\n                <p>3 레벨 수준의 격리</p>\r\n                <p>가장 엄격한 수준의 격리이다</p>\r\n                <p>가장 쉽게 데이터를 보호할 수는 있지만 쉽게 <strong>Deadlock</strong> 상태에 걸릴 수 있어 주의해야 한다.</p>\r\n                <h2 id=\"데이터부정합\">데이터 부정합</h2>\r\n                <h3 id=\"DirtyRead\">Dirty Read</h3>\r\n                <p>Commit 되지 않은 트랜잭션의 변경사항을 다른 트랜잭션에서 보게 된다</p>\r\n                <p>다음과 같은 문제가 발생한다</p>\r\n                <p>트랜잭션(T1)에서 1번 데이터 'A'를 'B'로 수정 한 뒤</p>\r\n                <p>트랜잭션(T2)에서 1번 데이터를 불러 온다면</p>\r\n                <p>트랜잭션(T1)이 아직 Commit하지 않은 상태이지만</p>\r\n                <p>트랜잭션(T2)는 1번 데이터의 값으로 'B'를 가져오게 된다</p>\r\n                <h3 id=\"Non-RepeatableRead\">Non-Repeatable Read</h3>\r\n                <p>한 트랜잭션에서 동일한 쿼리를 실행하여도 다른 결과가 나오는 현상</p>\r\n                <p>트랜잭션 내 동일한 쿼리문 사이에 해당 데이터의 값이 수정 또는 삭제 되었을 때 나타난다</p>\r\n                <p>다음과 같은 문제가 발생한다</p>\r\n                <p>트랜잭션(T1)에서 1번 데이터의 값 'A'를 불러온다</p>\r\n                <p>트랜잭션(T2)에서 1번 데이터의 값 'A'를 'B'로 수정 후 Commit한다</p>\r\n                <p>트랜잭션(T1)에서 다시 1번 데이터의 값을 불러온다</p>\r\n                <p>결과적으로 트랜잭션(T1)에서 값 'A'와 'B'가 조회된다.</p>\r\n                <h3 id=\"PhantomRead\">Phantom Read</h3>\r\n                <p>한 트랜잭션 내에서 동일한 쿼리문을 실행하였을 때</p>\r\n                <p>첫 번째 쿼리문에서 없던 레코드가 두 번째 쿼리문에서 조회되는 현상</p>\r\n                <p>Insert문에 대해서만 발생한다</p>\r\n                <p>다음과 같은 문제가 발생한다</p>\r\n                <p>레코드가 비어있는 테이블이 있다고 할 때</p>\r\n                <p>트랜잭션(T1)에서 모든 데이터를 조회한다 - (0건 조회)</p>\r\n                <p>트랜잭션(T2)에서 1번 데이터를 <strong>Insert</strong>한다</p>\r\n                <p>트랜잭션(T1)에서 모든 데이터를 조회한다 - (0건 조회)</p>\r\n                <p>트랜잭션(T2)에서 1번 데이터를 <strong>Update</strong>한다</p>\r\n                <p>트랜잭션(T1)에서 모든 데이터를 조회한다 - (1건 조회)</p>\r\n                <p><strong>Update문의 영향을 받은 후 부터 출력 된다</strong></p>\r\n                <h3 id=\"격리수준별데이터부정합\">격리 수준별 데이터 부정합</h3>\r\n                <img src={process.env.PUBLIC_URL + '/img/Database/isolation-level.png'} alt=\"Isolation\" />\r\n                <h1 id=\"출처\">출처</h1>\r\n                <p><a href=\"https://doooyeon.github.io/2018/09/29/transaction-isolation-level.html\" target=\"_blank\">트랜잭션 격리 수준</a></p>\r\n                <p><a href=\"https://joont92.github.io/db/%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EA%B2%A9%EB%A6%AC-%EC%88%98%EC%A4%80-isolation-level/\" target=\"_blank\">[db] 트랜잭션 격리 수준(isolation level)</a></p>\r\n                <p><a href=\"https://dar0m.tistory.com/225\" target=\"_blank\">트랜잭션 격리 수준(Transaction Isolation level)</a></p>\r\n              </article>\r\n              <div className=\"article-sidebar\">\r\n                <nav className=\"toc js-toc\">\r\n                </nav>\r\n              </div>\r\n            </div>\r\n            <Tocbot />\r\n          </main>\r\n        </Fragment>\r\n      </>\r\n    )\r\n  }\r\n}\r\nexport default Isolation","import Isolation from \"./Isolation\";\r\n\r\nexport default Isolation;","import { Component, Fragment } from 'react';\r\nimport { Tocbot } from '../../Toc/Toc';\r\n\r\nclass Lock extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Fragment>\r\n          <main className=\"content\">\r\n            <div className=\"article-container container-lg\">\r\n              <article className=\"article-content js-toc-content\">\r\n                <h1 id=\"Transaction\">Transaction</h1>\r\n                <p>트랜잭션(Transaction)은 데이터베이스의 상태를 변환시키는 하나의 기능을 수행하는 단위</p>\r\n                <p>쉽게 예를 들어 하나의 기능을 위해 여러개의 SQL질의문으로 이루어진 것</p>\r\n                <h2 id=\"ACID\">ACID</h2>\r\n                <h3 id=\"Atomicity\">Atomicity</h3>\r\n                <p>Atomicity(원자성) : 트랜잭션이 부분적으로 실행되다가 중단되지 않는것을 보장한다</p>\r\n                <p>All or nothing</p>\r\n                <p>ex) 돈을 보내는 것을 성공하고 돈이 빠져나가는 것을 실패하면 안된다</p>\r\n                <h3 id=\"Consistency\">Consistency</h3>\r\n                <p>Consistency(일관성) : 트랜잭션이 완료되면 항상 일관성 있는 데이터베이스 상태로 유지한다</p>\r\n                <p>즉, 무결성 제약을 위반할 경우 트랜잭션이 중단된다</p>\r\n                <p>무결성이란 데이터베이스에 저장된 값들의 결함이 없는 성질을 나타낸다</p>\r\n                <p>ex) 돈을 보냈을 때 계좌 금액이 음수가 될 경우 해당 트랜잭션을 중단한다</p>\r\n                <h3 id=\"Isolation\">Isolation</h3>\r\n                <p>Isolation(독립성) : 트랜잭션 수행 시 다른 트랜잭션의 연산 작업이 끼어들지 못하도록 보장한다</p>\r\n                <p>성능관련 이유로 인해 이 특성은 가장 유연성 있는 제약 조건이다</p>\r\n                <p>ex) 돈을 보내는 것을 성공하고 아직 빠져나가지 않은 상태에서 계좌를 조회할 수 없다</p>\r\n                <h3 id=\"Durability\">Durability</h3>\r\n                <p>Durability(영구성) : 성공된 트랜잭션은 영원히 반영되어야 한다</p>\r\n                <p>모든 트랜잭션은 로그로 남겨지며 오류 발생시 이전 상태로 되돌릴 수 있다</p>\r\n                <h2 id=\"ACID원칙\">ACID 원칙과 Isolation Level</h2>\r\n                <p>ACID 원칙을 엄격하게 지킬수록 동시성이 떨어지기 때문에 종종 지켜지지 않는다</p>\r\n                <p>Isolation Level 마다 각자 다른 Lock을 걸어준다</p>\r\n                <p>Isolation Level이 낮을 수록 문제가 발생할 확률은 높아지지만 동시성을 높일 수 있다</p>\r\n                <h2 id=\"InnoDB의Lock\">InnoDB의 Lock</h2>\r\n                <div className=\"video\"><iframe src=\"https://www.youtube.com/embed/onBpJRDSZGA\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\r\n                <h3 id=\"SharedLock\">Shared Lock (S)</h3>\r\n                <p>Row-level Lock</p>\r\n                <p>SELECT를 위해 사용</p>\r\n                <p>Shared Lock이 걸려있을 경우 다른 Shared Lock은 획득가능하지만 Exclusive Lock은 획득 불가능하다</p>\r\n                <p>S → S (O), S → X (X)</p>\r\n                <h3 id=\"ExclusiveLock\">Exclusive Lock (X)</h3>\r\n                <p>Row-level Lock</p>\r\n                <p>UPDATE, DELETE를 위해 사용</p>\r\n                <p>Shared Lock 보다 좀 더 엄격한 Lock</p>\r\n                <p>Exclusive Lock이 걸려있을 경우 Shared Lock, Exclusive Lock 모두 획득 불가능하다</p>\r\n                <p>X → S (X), X → X (X)</p>\r\n                <h3 id=\"IntentionLock\">Intention Lock</h3>\r\n                <p>Table Lock</p>\r\n                <br />\r\n                <p><strong>SELECT ... LOCK IN SHARE MODE</strong></p>\r\n                <p>먼저 Intention Shared Lock (IS) 이 걸리고 row-level에 S Lock이 걸린다</p>\r\n                <br />\r\n                <p><strong>SELECT ... FOR UPDATE</strong></p>\r\n                <p>먼저 Intention Exclusive Lock (IX) 이 걸리고 row-level에 X Lock이 걸린다</p>\r\n                <br />\r\n                <p>IS Lock과 IX Lock은 서로 Block 하지 않지만 row-level에 걸린 Lock에서 제어한다</p>\r\n                <p>LOCK TABLES, ALTER TABLE, DROP TABLE을 수행할 경우 Table-level Lock이 걸린다</p>\r\n                <p>따라서 IS, IX Lock을 필요로 하는 트랜잭션은 대기 상태로 남는다</p>\r\n                <p>반대로 IS, IX Lock이 걸려 있을 경우 해당 트랜잭션이 대기 상태로 남는다</p>\r\n                <h3 id=\"Lock관계\">IS, IX, S, X Lock의 관계</h3>\r\n                <img src={process.env.PUBLIC_URL + '/img/Database/lockcompare.png'} alt=\"lockcompare\" />\r\n                <h3 id=\"RecordLock\">Record Lock</h3>\r\n                <p>DB의 index record에 걸리는 Lock</p>\r\n                <p><strong>Transaction A) SELECT grade FROM student grade = 1 FOR UPDATE;</strong></p>\r\n                <p>해당 index record에 X Lock이 걸리게 된다.</p>\r\n                <p><strong>Transcation B) DELETE FROM student grade = 1;</strong></p>\r\n                <p>트랜잭션(B)은 트랜잭션(A)가 Commit되거나 Rollback되기 전까지 수행할 수 없다</p>\r\n                <h3 id=\"GapLock\">Gap Lock</h3>\r\n                <p>gap이란 DB에 실제로 record가 없는 부분이다</p>\r\n                <p>즉, 비어있는 레코드에 Lock이 걸리는 것이다</p>\r\n                <p>만약 student 테이블에 id가 5, 8인 레코드만 있는 상태에서</p>\r\n                <p><strong>Transaction A) SELECT grade FROM student WHERE id BETWEEN 3 AND 10 FOR UPDATE;</strong></p>\r\n                <p>해당 트랜잭션을 수행할 경우 3 &lt;= id &lt;= 4, 6 &lt;= id &lt;= 7, 9 &lt;= id &lt;= 10</p>\r\n                <p>위에 해당하는 곳에 Lock 이 걸리게 된다</p>\r\n                <p>따라서 id가 1부터 10사이의 값을 가지는 레코드를 추가하려할 경우</p>\r\n                <p>Transaction A가 Commit되거나 Rollback될 때까지 대기한다</p>\r\n                <h3 id=\"NextkeyLock\">Next-key Lock</h3>\r\n                <p>범위를 지정한 쿼리를 수행할 경우 Record Lock과 Gap Lock이 복합적으로 사용된다</p>\r\n                <img src={process.env.PUBLIC_URL + '/img/Database/lock-next-key.png'} alt=\"next-key-lock\" />\r\n                <h3 id=\"InsertintentionLock\">Insert intention Lock</h3>\r\n                <p>Insert 문에서 InnoDB 엔진 내부적으로 implicit하게 획득하는 특수한 형태의 Gap Lock</p>\r\n                <p>Gap안의 다른 위치에 INSERT문을 동시에 수행 하는 것이 목적</p>\r\n                <p>Insert intention Lock 은 서로 충돌하지 않는다</p>\r\n                <p>유니크 인덱스에서 해당 키만 잠그는 방식으로 겹치지 않으면 바로 진행 가능(InnoDB)</p>\r\n                <h3 id=\"AUTOINCLock\">AUTO-INC Lock</h3>\r\n                <p>여러 트랜잭션이 동시에 수행될 때, AUTO_INCREMENT 컬럼을 일관성 있게 만들기 위해 필요한 Lock</p>\r\n                <h2 id=\"Deadlock\">데드락(Deadlock)</h2>\r\n                <p>두개 이상의 트랜잭션이 동시에 진행될때 서로 필요한 락을 소유한 상태로 더이상 진행하지 못하는 상황</p>\r\n                <p>트랜잭션을 지원하는 데이터베이스에서는 자주 발생하므로 주의해야 한다</p>\r\n                <p>일반적인 DBMS에서는 데드락을 탐지해 자동으로 해소시켜준다</p>\r\n                <p>실제 데드락 상황이 아니어도 일정 시간이 초과하면 데드락으로 간주된다</p>\r\n                <p>이러한 과정에서 해당 트랜잭션이 취소 될 수 있으므로 재수행 시켜주어야 한다</p>\r\n                <p></p>\r\n                <h3 id=\"deadlockexample\">현실적인 Deadlock 예시</h3>\r\n                <img src={process.env.PUBLIC_URL + '/img/Database/lock-deadlock-funny.png'} alt=\"deadlockfunny\" />\r\n                <h3 id=\"reducedeadlock\">Deadlock을 줄일 수 있는 방법</h3>\r\n                <p>트랜잭션을 최대한 간결하게 만든다</p>\r\n                <p>인덱스를 잘 구성하여 레코드 스캔 횟수를 줄여 락이 걸리는 횟수를 줄인다</p>\r\n                <p>트랜잭션 내 여러 데이터 수정시에 Lock의 순서를 순차적으로 만든다</p>\r\n                <p>ex) A, B, C 테이블 수정시 A → B → C 순으로 수정하면 데드락 위험을 줄일 수 있다</p>\r\n                <h3 id=\"deadlockstatus\">데드락 상태 확인 명령어</h3>\r\n                <p>SHOW ENGINE INNODB STATUS;</p>\r\n                <h1 id=\"출처\">출처</h1>\r\n                <p><a href=\"https://suhwan.dev/2019/06/09/transaction-isolation-level-and-lock/\" target=\"_blank\">Lock으로 이해하는 Transaction의 Isolation Level</a></p>\r\n                <p><a href=\"https://www.letmecompile.com/mysql-innodb-lock-deadlock/\" target=\"_blank\">MySQL InnoDB lock, deadlock 이해하기</a></p>\r\n              </article>\r\n              <div className=\"article-sidebar\">\r\n                <nav className=\"toc js-toc\">\r\n                </nav>\r\n              </div>\r\n            </div>\r\n            <Tocbot />  \r\n          </main>\r\n        </Fragment>\r\n      </>\r\n    )\r\n  }\r\n}\r\nexport default Lock","import Lock from \"./Lock\";\r\n\r\nexport default Lock;","import React, { Component } from 'react'\r\nimport { Route, Routes } from \"react-router-dom\";\r\nimport Articles from './Articles';\r\nimport Isolation from './Isolation';\r\nimport Lock from './Lock';\r\n\r\nclass Database extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Routes>\r\n          <Route path='/' element={<Articles />} />\r\n          <Route path='/Isolation/*' element={<Isolation />} />\r\n          <Route path='/Lock/*' element={<Lock />} />\r\n        </Routes>\r\n      </>\r\n    )\r\n  }\r\n}\r\nexport default Database","import Database from \"./Database\";\r\n\r\nexport default Database;","import React, { Component } from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport './Articles.scss';\r\n\r\nclass Articles extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"datastructure_articles\">\r\n        <div className=\"container\">\r\n          <Link to=\"/DataStructure/Basic\" onClick=\"\">\r\n            <figure class=\"snip1200\">\r\n              <img src={process.env.PUBLIC_URL + '/img/DataStructure/Basic.png'} alt=\"Basic\" />\r\n              <figcaption>\r\n                <p>배열, 스택, 큐, 연결 리스트, 해쉬 테이블, 그래프, 트리</p>\r\n                <div class=\"heading\">\r\n                  <h2><span>자료 구조</span></h2>\r\n                </div>\r\n              </figcaption>\r\n            </figure>\r\n          </Link>\r\n          <Link to=\"/DataStructure/Array\" onClick=\"\">\r\n            <figure class=\"snip1200\">\r\n              <img src={process.env.PUBLIC_URL + '/img/DataStructure/Array.png'} alt=\"Array\" />\r\n              <figcaption>\r\n                <p>Array, ArrayList, LinkedList</p>\r\n                <div class=\"heading\">\r\n                  <h2><span>배열</span></h2>\r\n                </div>\r\n              </figcaption>\r\n            </figure>\r\n          </Link>\r\n          <Link to=\"/DataStructure/Queue\" onClick=\"\">\r\n            <figure class=\"snip1200\">\r\n              <img src={process.env.PUBLIC_URL + '/img/DataStructure/Queue.png'} alt=\"Queue\" />\r\n              <figcaption>\r\n                <p>Queue, Deque, Priority Queue</p>\r\n                <div class=\"heading\">\r\n                  <h2><span>큐</span></h2>\r\n                </div>\r\n              </figcaption>\r\n            </figure>\r\n          </Link>\r\n          <Link to=\"/DataStructure/Stack\" onClick=\"\">\r\n            <figure class=\"snip1200\">\r\n              <img src={process.env.PUBLIC_URL + '/img/DataStructure/Stack.png'} alt=\"Stack\" />\r\n              <figcaption>\r\n                <p>Stack, Vector</p>\r\n                <div class=\"heading\">\r\n                  <h2><span>스택</span></h2>\r\n                </div>\r\n              </figcaption>\r\n            </figure>\r\n          </Link>\r\n          <Link to=\"/DataStructure/Map\" onClick=\"\">\r\n            <figure class=\"snip1200\">\r\n              <img src={process.env.PUBLIC_URL + '/img/DataStructure/Map.png'} alt=\"Map\" />\r\n              <figcaption>\r\n                <p>Map, HashMap, TreeMap, LinkedHashMap</p>\r\n                <div class=\"heading\">\r\n                  <h2><span>맵</span></h2>\r\n                </div>\r\n              </figcaption>\r\n            </figure>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Articles","import { Component, Fragment } from 'react';\r\nimport { Tocbot } from '../../Toc/Toc';\r\n\r\nclass Basic extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Fragment>\r\n          <main className=\"content\">\r\n            <div className=\"article-container container-lg\">\r\n              <article className=\"article-content js-toc-content\">\r\n                <h1 id=\"자료구조\">자료구조</h1>\r\n                <h2 id=\"배열\">배열</h2>\r\n                <p>가장 기본적인 자료구조</p>\r\n                <p>논리적 저장 순서와 물리적 저장 순서가 일치한다</p>\r\n                <p>인덱스로 해당원소를 접근하기에 O(1)로 접근 가능하다</p>\r\n                <p>즉 random access가 가능하다</p>\r\n                <p>삭제, 삽입 할 경우 원소를 shift 해주어야 하기 때문에 O(n)의 시간복잡도를 갖는다</p>\r\n                <h2 id=\"연결리스트\">연결 리스트</h2>\r\n                <p>각 노드에 이전노드 주소와 다음노드 주소를 저장한다</p>\r\n                <p>삭제와 삽입을 O(1) 만에 해결 할 수 있다</p>\r\n                <p>하지만 해당 노드까지의 검색하는 과정에서 O(n) 이 걸리게 된다</p>\r\n                <p>즉 삽입, 삭제, 조회에 대해서 모두 O(n)의 복잡도를 갖게 된다</p>\r\n                <h2 id=\"스택\">스택</h2>\r\n                <p>LIFO(Last In First Out)</p>\r\n                <p>나중에 들어간 원소가 먼저 나오는 선형 자료구조</p>\r\n                <h2 id=\"큐\">큐</h2>\r\n                <p>FIFO(First In First Out), FCFS(First Come First Serve)</p>\r\n                <p>먼저 들어간 원소가 먼저 나오는 선형 자료구조</p>\r\n                <h2 id=\"해쉬테이블\">해쉬 테이블</h2>\r\n                <p>해쉬는 배열을 사용하기 때문에 빠른 검색 속도를 갖는다</p>\r\n                <p>데이터 고유의 인덱스로 접근하기 때문에 O(1)의 복잡도를 갖는다</p>\r\n                <p>충돌(Collision)이 무한해 질수록 O(n)에 가까운 복잡도를 갖게된다</p>\r\n                <p>인덱스로 저장되는 key값이 불규칙하다</p>\r\n                <p>해쉬 함수를 통해 해쉬 코드를 생성하여 이것을 key 값으로 사용한다</p>\r\n                <p>해쉬 함수를 어설프게 짜게 될 경우 다른 데이터가 동일한 key 값을 가질 수 있다(Collision)</p>\r\n                <h3 id=\"OpenAdress\">개방주소법(Open Address)</h3>\r\n                <p>해시 충돌이 발생할 경우 다른 해시 버킷에 해당 자료를 삽입한다</p>\r\n                <p>해시 버킷을 채운 밀도가 높아질수록 Worst Case 발생 빈도가 높아진다</p>\r\n                <p>1. Linear Probing : 순차적으로 탐색하며 비어있는 버킷을 찾을 때까지 진행된다</p>\r\n                <p>2. Quadratic probing : 2 차 함수를 이용해 탐색할 위치를 찾는다</p>\r\n                <p>3. Double hashing probing : 하나의 해쉬 함수에서 충돌이 발생하면 2 차 해쉬 함수를 이용해 새로운 주소를 할당한다.</p>\r\n                <h3 id=\"SeparateChaining\">분리연결법(Separate Chaining)</h3>\r\n                <p>일반적으로 개방주소법보다 빠르다</p>\r\n                <p>JAVA 8 이후 에서는 해당 방식을 복합적으로 사용하여 HashMap을 구현한다</p>\r\n                <p>1. Linked List : 버킷을 연결리스트로 만들어 Collision 발생시 bucket의 list에 추가한다</p>\r\n                <p>삽입, 삭제가 간단하지만 작은 데이터의 오버헤드가 부담된다.</p>\r\n                <p>JAVA 7 에서는 해당 방식을 사용하여 HashMap을 구현한다</p>\r\n                <p>2. Read-Black Tree : 연결리스트 대신 트리를 사용한다.</p>\r\n                <p>key-value 쌍의 개수가 적을 경우 연결리스트를 사용한다(트리는 기본적으로 메로리 사용량이 크다)</p>\r\n                <h3 id=\"개방주소법vs분리연결법\">개방주소법 vs 분리연결법</h3>\r\n                <p>두 방식 모두 Worst Case에서 O(N)의 복잡도를 갖는다</p>\r\n                <p>개방주소법 방식은 연속된 공간에 데이터를 저장하기 때문에 캐시 효율이 높다</p>\r\n                <p>개방주소법은 버킷을 계속 사용한다 따라서 분리연결법 방식은 테이블의 확장을 늦출 수 있다</p>\r\n                <h3 id=\"보조해시함수\">보조 해시 함수</h3>\r\n                <p>key의 해시 값을 변형하여 충돌 가능성을 줄인다</p>\r\n                <p>분리연결법 방식에서 사용되며 Worst Case 경우를 줄일 수 있다</p>\r\n                <h3 id=\"해시버킷동적확장\">해시 버킷 동적 확장(Resize)</h3>\r\n                <p>해시 버킷이 작다면 메모리를 절약할 수 있지만 충돌이 일어 날 수 있다</p>\r\n                <p>따라서 해시 버킷의 개수가 75% 이상이 될경우 해당 버킷의 크기를 2배로 늘린다</p>\r\n                <h2 id=\"그래프\">그래프</h2>\r\n                <p>정점과 간선의 집합</p>\r\n                <p>정방 행렬 또는 연결리스트를 이용하여 구현된다</p>\r\n                <h3 id=\"방향그래프\">방향 그래프</h3>\r\n                <p>간선에 방향성이 포함되어 있는 그래프를 나타낸다</p>\r\n                <h3 id=\"무방향그래프\">무방향 그래프</h3>\r\n                <p>간선에 방향성이 없는 그래프를 나타낸다(양방향)</p>\r\n                <h2 id=\"트리\">트리</h2>\r\n                <p>노드로 구성된 계층적 자료구조</p>\r\n                <p>트리 또한 그래프이며, 사이클이 허용되지 않은 그래프를 나타낸다</p>\r\n                <p>최상위 노드(root)에 child 노드를 연결하고, child에 child를 추가하는 방식으로 구현된다</p>\r\n                <h1 id=\"출처\">출처</h1>\r\n                <p><a href=\"https://velog.io/@jha0402/Data-structure-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%9D%BC%EB%A9%B4-%EA%BC%AD-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%A0-7%EA%B0%80%EC%A7%80-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0\" target=\"_blank\">[Data structure] 개발자라면 꼭 알아야 할 7가지 자료구조</a></p>\r\n                <p><a href=\"https://github.com/JaeYeopHan/Interview_Question_for_Beginner/tree/master/DataStructure\" target=\"_blank\">Part 1-2 DataStructure</a></p>\r\n                <p><a href=\"http://d2.naver.com/helloworld/831311\" target=\"_blank\">Java HashMap은 어떻게 동작하는가?</a></p>\r\n              </article>\r\n              <div className=\"article-sidebar\">\r\n                <nav className=\"toc js-toc\">\r\n                </nav>\r\n              </div>\r\n            </div>\r\n            <Tocbot />  \r\n          </main>\r\n        </Fragment>\r\n      </>\r\n    )\r\n  }\r\n}\r\nexport default Basic","import Basic from \"./Basic\";\r\n\r\nexport default Basic;","import { Component, Fragment } from 'react';\r\nimport { Tocbot } from '../../Toc/Toc';\r\nimport ReactEmbedGist from 'react-embed-gist';\r\n\r\nclass Array extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Fragment>\r\n          <main className=\"content\">\r\n            <div className=\"article-container container-lg\">\r\n              <article className=\"article-content js-toc-content\">\r\n                <h1 id=\"배열\">배열</h1>\r\n                <div className=\"video\"><iframe src=\"https://www.youtube.com/embed/8WSStCUPhmk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\r\n                <h2 id=\"Array\">Array</h2>\r\n                <p>선형 자료구조</p>\r\n                <p>한번 크기를 할당하면 변경할 수 없다</p>\r\n                <p>배열 초기화시 메모리에 할당되어 ArrayList보다 빠르다</p>\r\n                <p>시간복잡도 : 조회 O(1), 수정 O(1)</p>\r\n                <h2 id=\"ArrayList\">ArrayList</h2>\r\n                <p>선형 자료구조</p>\r\n                <p>크기가 가변적이다</p>\r\n                <p>구성은 Array로 되어있기 때문에 Array의 특성을 갖는다</p>\r\n                <p>데이터 추가 삭제시 메모리를 재할당하기 때문에 속도가 Array보다 느리다</p>\r\n                <p>시간복잡도 : 조회 O(1), 수정 O(1), 삽입 O(n), 삭제 O(n)</p>\r\n                <h3 id=\"initialsize\">초기 공간</h3>\r\n                <p>ArrayList는 기본적으로 10의 크기를 갖는다</p>\r\n                <p>생성자 함수가 오버로딩 되어있으므로 크기를 지정 할 수 있다</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/aef91de59a18333d1004c4daaf8dc2a1\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h3 id=\"arraylist_add\">Add</h3>\r\n                <p>만약 정해진 크기만큼 꽉찬 상태에서 추가를 시도하려고하면 grow() 함수를 실행하여 크기를 증가시킨다</p>\r\n                <p>1. 현재 리스트의 크기 + 1 이 수용량 을 초과하지 않는지 확인한다</p>\r\n                <p>2. 만약 수용량을 초과한다면 현재 리스트의 1.5배 크기의 새로운 리스트를 만든다</p>\r\n                <p>3. 새로 만들어진 리스트에 현재 리스트를 복사한다 O(n) 소요</p>\r\n                <p>4. 마지막으로 리스트에 값을 추가한다</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/7fe376de30fcfe41c553aae3a518adc4\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h3 id=\"arraylist_remove\">Remove</h3>\r\n                <p>삭제에는 인덱스를 사용할 수 있고 객체를 사용할 수 있다</p>\r\n                <p>1-1. 인덱스 삭제시에는 우선 삭제할 인덱스의 범위가 올바른지 확인 한다</p>\r\n                <p>1-2. 만약 올바르지 않는 범위에 속한다면 IndexOutOfBoundsException를 반환한다</p>\r\n                <p>1-3. 올바른 범위 일경우 지워질 원소위치+1 부터 마지막까지 배열을 복사하여 지워질 원소위치에서 마지막-1 까지 복사한다</p>\r\n                <p>1-4. 마지막으로 마지막값을 null로 바꿔주어 GC가 올바르게 작동하도록하며 크기를 1 줄인다</p>\r\n                <img src={process.env.PUBLIC_URL + '/img/DataStructure/array-arraylist-remove.png'} alt=\"arraylist-remove\" />\r\n                <p>2-1. 객체를 이용해 삭제할 경우에는 해당객체가 빈 객체 인경우와 아닌 경우로 생각한다</p>\r\n                <p>2-2. 빈 객체 인경우 null 값을 이용해 비교해 제거한다</p>\r\n                <p>2-3. 빈 객체가 아닌경우 해당 객체의 equals를 이용해 일치하는 것을 제거한다</p>\r\n                <p>2-4. 아무것도 발견되지 않을 경우 false를 반환한다</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/b738d7b9980ee567b7b1732097cad3b5\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h2 id=\"LinkedList\">LinkedList</h2>\r\n                <p>선형 자료구조</p>\r\n                <p>크기가 가변적이다</p>\r\n                <p>각 노드에 이전노드 주소와 다음노드 주소를 저장한다</p>\r\n                <p>시간복잡도 : 조회 O(n), 수정 O(1), 삽입 O(1), 삭제 O(1)</p>\r\n                <p>수정과 삽입 삭제 모두 O(1)이지만 해당 노드까지 가는데 O(n)이 걸린다</p>\r\n                <p>가장 앞 혹은 뒤를 조회할 경우에는 O(1)의 시간복잡도를 갖는다</p>\r\n                <h3 id=\"linkedlist_constructor\">생성자</h3>\r\n                <p>Node 클래스인 first, last를 갖으며 크기는 0이다</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/b27f8998db8594b225efb38946ffc554\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h3 id=\"linkedlist_node\">Node 클래스</h3>\r\n                <p>Node 클래스는 해당 값과 이전노드, 다음노드의 주소를 갖고있다</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/f26d601e9280ba1f858e6003ecd676f7\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h3 id=\"linkedlist_add\">Add</h3>\r\n                <p>prev에는 현재 마지막 노드의 주소</p>\r\n                <p>next에는 null을 가진 노드를 생성한다</p>\r\n                <p>LinkedList의 last에는 새로운 노드의 주소를 넣어준다</p>\r\n                <p>만약 LinkedList의 l값이 null이라면 LinkedList의 first에 새로운 노드의 주소를 넣어준다</p>\r\n                <p>그렇지 않다면 l값의 next값에 새로운 노드의 주소를 넣어준다</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/cf31f7b042a0fc85a3629abd9ab9d023\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h3 id=\"linkedlist_remove\">Remove</h3>\r\n                <p>해당 인덱스가 정상적인 범위 인지 확인한다</p>\r\n                <p>LinkedList의 크기를 반으로 나누어 더 가까운쪽으로 탐색을 한다</p>\r\n                <p>해당노드의 prev값이 null일 경우 LinkedList의 first를 노드의 next 값으로 수정한다</p>\r\n                <p>null이 아닐경우 prev.next 값을 해당노드의 next 값으로 바꾸고 해당노드의 prev 값을 null로 수정한다</p>\r\n                <p>해당노드의 next값이 null일 경우 LinkedList의 last를 노드의 prev 값으로 수정한다</p>\r\n                <p>null이 아닐경우 next.prev 값을 해당노드의 prev 값으로 바꾸고 해당노드의 next 값을 null로 수정한다</p>\r\n                <p>마지막으로 해당노드의 값을 null로 바꾸어주고 해당 값을 리턴한다</p>\r\n                <p>지워진 노드는 GC에 의해 나중에 처리된다</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/8901dca33ee4573a81464e220dee191a\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h1 id=\"출처\">출처</h1>\r\n                <p><a href=\"https://sabarada.tistory.com/63\" target=\"_blank\">[자료구조] 코드로 알아보는 java의 ArrayList</a></p>\r\n                <p><a href=\"https://sabarada.tistory.com/64\" target=\"_blank\">[자료구조] 코드로 알아보는 java의 LinkedList</a></p>\r\n              </article>\r\n              <div className=\"article-sidebar\">\r\n                <nav className=\"toc js-toc\">\r\n                </nav>\r\n              </div>\r\n            </div>\r\n            <Tocbot />\r\n          </main>\r\n        </Fragment>\r\n      </>\r\n    )\r\n  }\r\n}\r\nexport default Array","import Array from \"./Array\";\r\n\r\nexport default Array;","import { Component, Fragment } from 'react';\r\nimport { Tocbot } from '../../Toc/Toc';\r\nimport ReactEmbedGist from 'react-embed-gist';\r\n\r\nclass Queue extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Fragment>\r\n          <main className=\"content\">\r\n            <div className=\"article-container container-lg\">\r\n              <article className=\"article-content js-toc-content\">\r\n                <h1 id=\"큐\">큐</h1>\r\n                <h2 id=\"Array\">Queue</h2>\r\n                <div className=\"video\"><iframe src=\"https://www.youtube.com/embed/W3jNbNGyjMs\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\r\n                <p>먼저 넣은 것이 먼저 나오는 성질이 있다(FIFO, FCFS)</p>\r\n                <p>LinkedList를 이용하여 쉽게 사용할 수 있다</p>\r\n                <img src={process.env.PUBLIC_URL + '/img/DataStructure/collection.png'} alt=\"collection\" />\r\n                <p>Collection을 상속받는 Interface</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/161621571775a44bc054b2da8d2f8fa0\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <p>LinkedList의 기능을 그대로 가져다 사용한다</p>\r\n                <h3 id=\"queue_add\">add</h3>\r\n                <p>마지막 노드에 새로운 노드를 만들어 연결시켜 준다</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/1618087ad0f9735294d8a550bf93b819\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h3 id=\"queue_offer\">offer</h3>\r\n                <p>add와 같은 기능을 수행하지만 예외사항에서 차이가 있다</p>\r\n                <p>Queue가 가득차 예외가 발생할 경우 false를 반환한다</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/7c028031e9cecd3313600a8c081a204e\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h3 id=\"queue_poll\">poll</h3>\r\n                <p>Queue가 비어있다면 null값을 반환하고 그렇지 않다면 가장 앞에 있는 값을 반환한다</p>\r\n                <p>반환 후에 해당 값을 제거한다</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/c6bb54115b7ceae23f38df42cc5d9cf0\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h3 id=\"queue_remove\">remove</h3>\r\n                <p>poll과 같은 기능을 수행하지만 Queue에 값이 없다면 NoSuchElementException()을 반환한다</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/071ec0eeb3d2d25358641ac6d882546d\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h3 id=\"queue_peek\">peek</h3>\r\n                <p>Queue가 비어있다면 null값을 반환하고 그렇지 않다면 가장 앞에 있는 값을 반환한다</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/e4bf04943f7aec9c7f68e8c079e37c41\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <p></p>\r\n                <h3 id=\"queue_element\">element</h3>\r\n                <p>peek와 같은 기능을 수행하지만 Queue에 값이 없다면 NoSuchElementException()을 반환한다</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/4d741362be66234bf4ae874ec698f1e9\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <img src={process.env.PUBLIC_URL + '/img/DataStructure/queue-methods.png'} alt=\"queue-methods\" />\r\n                <h2 id=\"Deque\">Deque</h2>\r\n                <div className=\"video\"><iframe src=\"https://www.youtube.com/embed/DEXpIZpfqiQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\r\n                <p>덱은 앞, 뒤로 원소를 넣고 뺄 수 있다(큐, 스택)</p>\r\n                <p>추가하고 삭제하는과정에서 O(1)의 시간복잡도를 갖게된다</p>\r\n                <p>Queue 인터페이스를 상속받아서 만든다</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/658b69c7f11ab14943d3c36bb293e5a8\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <p>Deque은 LinkedList 혹은 ArrayDeque를 통해 구현할 수 있다</p>\r\n                <p>LinkedList를 이용할 경우 Queue에서 설명한 메커니즘과 같은 원리로 작동한다</p>\r\n                <p>아래 내용은 ArrayDeque를 사용했을 경우를 설명한다</p>\r\n                <p>ArrayDeque는 ArrayList의 원리와 비슷하게 작동한다</p>\r\n                <h3 id=\"deque_constructor\">생성자</h3>\r\n                <p>생성시에 16개 크기의 공간을 만든다</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/1c8203900fadea650a71fbb79521d86d\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h3 id=\"deque_add\">Add</h3>\r\n                <p>덱의 앞에 추가 할 경우에는 addFirst()를 사용하면 된다</p>\r\n                <p>덱의 뒤에 추가 할 경우에는 addLast()를 사용하면 된다</p>\r\n                <p>빈 값을 추가하려고 할 경우 NullPointerException()를 반환한다</p>\r\n                <p>이때 ArrayDeque은 원형 자료구조로 되어있다고 생각하면 된다</p>\r\n                <p>head 혹은 tail에 값을 추가하고 head와 tail이 만나면 덱의 공간을 2배로 만들어준다</p>\r\n                <p>덱의 공간이 너무 커져서 overflow 될 경우 IllegalStateException()을 반환한다</p>\r\n                <p>이 과정에서 배열복사가 일어나게 되고 시간복잡도는 O(n) 이다</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/c00f84adb5f8050b39267fbbeb81f55d\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h3 id=\"deque_poll\">Poll</h3>\r\n                <p>덱의 앞에서 빼올 경우에는 pollFirst()를 사용하면 된다</p>\r\n                <p>덱의 뒤에서 빼올 경우에는 pollLast()를 사용하면 된다</p>\r\n                <p>값이 비어있을 경우 null값을 반환한다</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/c3c9397c20bf69570ab99add20c06210\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h2 id=\"priorityqueue\">Priority Queue</h2>\r\n                <div className=\"video\"><iframe src=\"https://www.youtube.com/embed/AjFlp951nz0\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\r\n                <p>우선순위 큐는 우선순위가 높은 순서로 나오는 순서로 되어있다</p>\r\n                <p>힙구조로 저장되어있기 때문에 그대로 저장된 배열을 출력하면 순서가 섞여있다</p>\r\n                <img src={process.env.PUBLIC_URL + '/img/DataStructure/queue-pq-toarray.png'} alt=\"queue-pq-toarray\" />\r\n                <p>poll()을 사용하여 출력하면 원소를 빼낼때마다 힙구조를 재조정하기 때문에 순서대로 나오게 된다</p>\r\n                <img src={process.env.PUBLIC_URL + '/img/DataStructure/queue-pq-toarray2.png'} alt=\"queue-pq-toarray2\" />\r\n                <h3 id=\"priorityqueue_constructor\">생성자</h3>\r\n                <p>크기를 설정할 수 있으며 기본값으로 11을 갖는다</p>\r\n                <p>comparator()을 사용하여 compare()함수를 오버라이딩 하여 우선순위를 정할 수 있다</p>\r\n                <p>해당 클래스에 compareTo()가 구현되지 않은 상태에서 comparator()를 지정해주지 않으면 예외를 발생시킨다</p>\r\n                <img src={process.env.PUBLIC_URL + '/img/DataStructure/queue-pq-exception.png'} alt=\"queue-pq-exception\" />\r\n                <p></p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/c81b76fd8dac22d4412b7026043023f0\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h3 id=\"priorityqueue_add\">add</h3>\r\n                <p>허용된 용량을 초과한다면 해당 우선순위큐의 크기를 1.5배로 만든다</p>\r\n                <p>comparator을 정의해주지 않았을 경우에는 해당 객체의 compareTo()를 사용한다</p>\r\n                <p>comparator을 정의했을 경우 우선순위큐의 compare()를 사용한다</p>\r\n                <p>1. 우선순위큐 배열의 마지막에 값을 추가한다</p>\r\n                <p>2. 새로운 노드를 부모와 비교해가면서 우선순위가 높을 때까지 교환한다</p>\r\n                <p>이 과정에서 O(logN)의 시간복잡도를 갖는다</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/694f99b9e54fdfeab04f549bff703e4d\"\r\n                    loadingClass=\"loading__screen\"\r\n                    />\r\n                </div>\r\n                <h3 id=\"priorityqueue_poll\">poll</h3>\r\n                <p>comparator을 정의해주지 않았을 경우에는 해당 객체의 compareTo()를 사용한다</p>\r\n                <p>comparator을 정의했을 경우 우선순위큐의 compare()를 사용한다</p>\r\n                <p>1. 우선순위큐 루트값을 제거한다</p>\r\n                <p>2. 우선순위큐의 마지막 값을 루트위치로 옮긴다</p>\r\n                <p>3. 자식과 비교해가면서 우선순위가 낮을 때까지 교환한다</p>\r\n                <p>이 과정에서 O(logN)의 시간복잡도를 갖는다</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/bc5cac2f394fcc39c771e26f951823e4\"\r\n                    loadingClass=\"loading__screen\"\r\n                    />\r\n                </div>\r\n                <h1 id=\"출처\">출처</h1>\r\n                <p><a href=\"https://beomseok95.tistory.com/157\" target=\"_blank\">Collection에대하여 -1</a></p>\r\n                <p><a href=\"https://jinyoungchoi95.tistory.com/29\" target=\"_blank\">[JAVA] Collection Interface/ add()와 offer() 차이</a></p>\r\n                <p><a href=\"https://tecoble.techcourse.co.kr/post/2021-05-10-stack-vs-deque/\" target=\"_blank\">Java 의 Stack 대신 Deque</a></p>\r\n                <p><a href=\"https://cjh5414.github.io/priorityqueue/\" target=\"_blank\">Java 우선순위 큐(Priority Queue) 와 Comparable, Comparator</a></p>\r\n                <p><a href=\"https://johngrib.github.io/wiki/heap-sort/\" target=\"_blank\">힙 정렬 (Heap Sort)</a></p>\r\n              </article>\r\n              <div className=\"article-sidebar\">\r\n                <nav className=\"toc js-toc\">\r\n                </nav>\r\n              </div>\r\n            </div>\r\n            <Tocbot />\r\n          </main>\r\n        </Fragment>\r\n      </>\r\n    )\r\n  }\r\n}\r\nexport default Queue","import Queue from \"./Queue\";\r\n\r\nexport default Queue;","import { Component, Fragment } from 'react';\r\nimport { Tocbot } from '../../Toc/Toc';\r\nimport ReactEmbedGist from 'react-embed-gist';\r\n\r\nclass Stack extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Fragment>\r\n          <main className=\"content\">\r\n            <div className=\"article-container container-lg\">\r\n              <article className=\"article-content js-toc-content\">\r\n                <h1 id=\"스택\">스택</h1>\r\n                <div className=\"video\"><iframe width=\"1280\" height=\"720\" src=\"https://www.youtube.com/embed/DsZHDmth6Pc\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\r\n                <p>스택이란 나중에 추가된 데이터가 먼저 나오는 성질(LIFO)을 가진 자료구조이다</p>\r\n                <p>재귀적 알고리즘을 수행할때 주로 이용된다</p>\r\n                <h2 id=\"기능\">기능</h2>\r\n                <h3 id=\"Push\">Push</h3>\r\n                맨 뒤에 값을 추가하며 시간복잡도는 O(1) 이다.\r\n                <h3 id=\"Pop\">Pop</h3>\r\n                맨 뒤에 값을 꺼내오며 시간복잡도는 O(1) 이다.\r\n                <h3 id=\"Peek\">Peek</h3>\r\n                맨 뒤에 값을 확인하며 시간복잡도는 O(1) 이다.\r\n                <h2 id=\"Vector\">Vector</h2>\r\n                <p>JAVA에서 Stack 클래스는 Vector클래스를 상속받기 때문에 잘 사용되지 않는다</p>\r\n                <p>Vector클래스는 get()과 set()역할을 하는 함수에 <strong>synchronized</strong>가 붙어 있어 성능이 저하된다</p>\r\n                <p>싱글스레드 환경에서는 <strong>ArrayDeque를</strong> 사용하는게 더욱 빠르다 (Thread-Safe 하지 않음)</p>\r\n                <p>멀티스레드 환경에서는 <strong>Collections.synchronizedList()</strong>를 이용하여 Thread-Safe 하게 하도록 한다</p>\r\n                <p>이러한 이유는 Stack, Vector 가 JDK 1.0부터 존재하였기에 잘못 설계 된 경우이다</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/bb293c1d83c4004bbed06112b029aaf0\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <p></p>\r\n                <h1 id=\"출처\">출처</h1>\r\n                <p><a href=\"https://devlog-wjdrbs96.tistory.com/244\" target=\"_blank\">[Java] Stack 클래스는 무엇이고 문제점은 무엇일까?</a></p>\r\n                <p><a href=\"https://aahc.tistory.com/8\" target=\"_blank\">자바 컬렉션 프레임워크 Vector와 Stack은 왜 안쓰는가?</a></p>\r\n              </article>\r\n              <div className=\"article-sidebar\">\r\n                <nav className=\"toc js-toc\">\r\n                </nav>\r\n              </div>\r\n            </div>\r\n            <Tocbot />\r\n          </main>\r\n        </Fragment>\r\n      </>\r\n    )\r\n  }\r\n}\r\nexport default Stack","import Stack from \"./Stack\";\r\n\r\nexport default Stack;","import { Component, Fragment } from 'react';\r\nimport { Tocbot } from '../../Toc/Toc';\r\nimport ReactEmbedGist from 'react-embed-gist';\r\n\r\nclass Map extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Fragment>\r\n          <main className=\"content\">\r\n            <div className=\"article-container container-lg\">\r\n              <article className=\"article-content js-toc-content\">\r\n                <h1 id=\"맵\">맵</h1>\r\n                <div className=\"video\"><iframe src=\"https://www.youtube.com/embed/7qV5nJ39Lqw\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\r\n                <p>키와 값으로 이루어진 자료구조</p>\r\n                <p><strong>키는 중복될 수 없지만 값은 중복될 수 있다</strong></p>\r\n                <h2 id=\"MapInterface\">Map Interface</h2>\r\n                <p></p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/ebe1dbaac3ebb329c0ae92812940efb2\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h2 id=\"HashMap\">HashMap</h2>\r\n                <p>hash값에 의해 키순서가 정해지게 된다</p>\r\n                <p>따라서 출력에 순서가 정해지지 않는다</p>\r\n                <img src={process.env.PUBLIC_URL + '/img/DataStructure/map-hashmap-order.png'} alt=\"hashmap-order\" />\r\n                <p>Object의 hashCode()로 hash값이 정해지게 된다</p>\r\n                <p>이때 hashCode()는 native로서 C 혹은 C++로 작성된 것이므로 JNI를 통해 사용한다</p>\r\n                <h3 id=\"HashMap_constructor\">생성자</h3>\r\n                <p>초기용량과 load factor 값을 초기에 설정할 수 있다</p>\r\n                <p>load factor 값은 저장공간을 미리 확보하는 것이다 (기본값 0.75)</p>\r\n                <p>load factor * 100(%) 만큼 공간이 채워졌을때 공간의 크기를 2배로 늘리게 된다</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/79cc8bf8fddaa8005b8198e5ca6e6a4c\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h3 id=\"HashMap_put\">put</h3>\r\n                <p>JAVA에서는 분리연결법을 사용하여 저장하며 LinkedList를 이용한다</p>\r\n                <p>JAVA 8이후에는 테이블의 크기가 특정크기 보다 커질경우 Red-Black Tree를 이용하여 저장한다</p>\r\n                <p>Red-Black Tree를 사용함으로서 메모리는 더 차지 하지만 기존 탐색 O(n)에서 O(logn)으로 단축할 수 있다</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/9e4317569743d51702694a6e6096759d\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h3 id=\"HashMap_remove\">remove</h3>\r\n                <p>해당 key값과 일치하는 값이 존재할 경우 해당값을 삭제하고 반환한다</p>\r\n                <p>그렇지 않다면 null값을 반환한다</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/b2a496cf51bd95532f35fef8c45f9e57\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h3 id=\"HashMap_get\">get</h3>\r\n                <p>해당 hash값에 대한 테이블이 LinkedList 형태인지 Tree형태인지 확인 후에</p>\r\n                <p>LinkedList의 경우 연결된 노드를 탐색하며 key값과 일치할경우 해당 값 반환 O(N)</p>\r\n                <p>Tree의 경우 연결된 노드를 탐색하며 key값과 일치할경우 해당 값 반환 O(logN)</p>\r\n                <p>존재하지 않다면 null값을 반환한다</p>\r\n                <p>모든 원소에 대해 collision이 일어날 경우 Worst-case지만 일반적으로 O(1)이다</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/03c5e3b360353c4dae42235b617b7891\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h3 id=\"HashMap_containsKey\">containsKey</h3>\r\n                <p>get과 같은 getNode()를 통해 진행되며 해당 리턴값이 null인지 여부를 확인한다</p>\r\n                <p>일반적으로 O(1)의 시간복잡도를 갖는다</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/e15ca3fdd6e97f3f5918432597b2761b\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h3 id=\"HashMap_containsValue\">containsValue</h3>\r\n                <p>containsKey와 다르게 <strong>모든 원소를 조회</strong>하며 확인한다</p>\r\n                <p>따라서 O(N)의 시간 복잡도를 갖는다</p>\r\n                <div className=\"gist\">\r\n                  <ReactEmbedGist gist=\"cbkpar/68e536fb7a219d355abd553ed0fd7361\"\r\n                    loadingClass=\"loading__screen\"\r\n                  />\r\n                </div>\r\n                <h2 id=\"LinkedHashMap\">LinkedHashMap</h2>\r\n                <h2 id=\"TreeMap\">TreeMap</h2>\r\n                <h1 id=\"출처\">출처</h1>\r\n                <p><a href=\"https://kutar37.tistory.com/entry/%EC%9E%90%EB%B0%94-HashMap-LinkedHashMap-TreeMap\" target=\"_blank\">자바 HashMap, LinkedHashMap, TreeMap</a></p>\r\n                <p><a href=\"https://staticclass.tistory.com/104\" target=\"_blank\">[자바] HashSet - 생성자, 메소드</a></p>\r\n                <p><a href=\"https://sabarada.tistory.com/57\" target=\"_blank\">HashMap이란</a></p>\r\n              </article>\r\n              <div className=\"article-sidebar\">\r\n                <nav className=\"toc js-toc\">\r\n                </nav>\r\n              </div>\r\n            </div>\r\n            <Tocbot />\r\n          </main>\r\n        </Fragment>\r\n      </>\r\n    )\r\n  }\r\n}\r\nexport default Map","import Map from \"./Map\";\r\n\r\nexport default Map;","import React, { Component } from 'react'\r\nimport { Route, Routes } from \"react-router-dom\";\r\nimport Articles from './Articles';\r\nimport Basic from './Basic';\r\nimport Array from './Array';\r\nimport Queue from './Queue';\r\nimport Stack from './Stack';\r\nimport Map from './Map';\r\n\r\nclass DataStructure extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Routes>\r\n          <Route path='/' element={<Articles />} />\r\n          <Route path='/Basic/*' element={<Basic />} />\r\n          <Route path='/Array/*' element={<Array />} />\r\n          <Route path='/Queue/*' element={<Queue />} />\r\n          <Route path='/Stack/*' element={<Stack />} />\r\n          <Route path='/Map/*' element={<Map />} />\r\n        </Routes>\r\n      </>\r\n    )\r\n  }\r\n}\r\nexport default DataStructure","import DataStructure from \"./DataStructure\";\r\n\r\nexport default DataStructure;","import { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport './Header.scss';\r\n\r\nclass Header extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tabidx: 0,\r\n    };\r\n  }\r\n\r\n  changetab = (e, idx) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      tabidx: idx\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (window.location.pathname.includes('/Algorithm')) {\r\n      this.setState({\r\n        tabidx: 1\r\n      });\r\n    }\r\n    if (window.location.pathname.includes('/DataStructure')) {\r\n      this.setState({\r\n        tabidx: 2\r\n      });\r\n    }\r\n    if (window.location.pathname.includes('/Database')) {\r\n      this.setState({\r\n        tabidx: 3\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <header className=\"header\">\r\n        <div className=\"container\">\r\n          <div onClick={(e) => this.changetab(e, 0)}><Link to=\"/\">\r\n            <img className=\"logo\" src={process.env.PUBLIC_URL + \"/logo192.jpg\"} alt=\"\" />\r\n          </Link>\r\n          </div>\r\n          <ul>\r\n            <li className={this.state.tabidx === 1 ? \"active\" : \"\"} onClick={(e) => this.changetab(e, 1)}><Link to=\"/Algorithm\">알고리즘</Link></li>\r\n            <li className={this.state.tabidx === 2 ? \"active\" : \"\"} onClick={(e) => this.changetab(e, 2)}><Link to=\"/DataStructure\">자료구조</Link></li>\r\n            <li className={this.state.tabidx === 3 ? \"active\" : \"\"} onClick={(e) => this.changetab(e, 3)}><Link to=\"/Database\">데이터베이스</Link></li>\r\n          </ul>\r\n        </div>\r\n      </header>\r\n    )\r\n  }\r\n}\r\nexport default Header","import { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport './Home.scss';\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"Home\">\r\n          <div className=\"container\">\r\n            <Link to=\"/Algorithm\" onClick=\"\">\r\n              <figure class=\"snip1200\">\r\n                <img src={process.env.PUBLIC_URL + '/img/Algorithm/index.png'} alt=\"Algorithm\" />\r\n                <figcaption>\r\n                  <p>어떠한 문제를 풀기 위해 정해진 일련의 절차나 방법</p>\r\n                  <div class=\"heading\">\r\n                    <h2><span>알고리즘</span></h2>\r\n                  </div>\r\n                </figcaption>\r\n              </figure>\r\n            </Link>\r\n            <Link to=\"/DataStructure\" onClick=\"\">\r\n            <figure class=\"snip1200\">\r\n              <img src={process.env.PUBLIC_URL + '/img/DataStructure/index.png'} alt=\"DataStructure\" />\r\n              <figcaption>\r\n                <p>효율적인 접근 및 수정을 가능하게 하는 자료의 구조</p>\r\n                <div class=\"heading\">\r\n                  <h2><span>자료구조</span></h2>\r\n                </div>\r\n              </figcaption>\r\n            </figure>\r\n            </Link>\r\n            <Link to=\"/Database\" onClick=\"\">\r\n            <figure class=\"snip1200\">\r\n              <img src={process.env.PUBLIC_URL + '/img/Database/index.png'} alt=\"Database\" />\r\n              <figcaption>\r\n                <p>구조화된 정보 또는 데이터의 조직화된 모음</p>\r\n                <div class=\"heading\">\r\n                  <h2><span>데이터베이스</span></h2>\r\n                </div>\r\n              </figcaption>\r\n            </figure>\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\nexport default Home","import { Route, Routes, BrowserRouter } from 'react-router-dom';\r\nimport Algo from './Algorithm';\r\nimport Database from './Database';\r\nimport DataStructure from './DataStructure';\r\nimport Header from \"./Header/Header\";\r\nimport Home from \"./Home/Home\";\r\n\r\nexport default () => (\r\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <Header />\r\n    <Routes>\r\n      <Route exact path='/' element={<Home />} />\r\n      <Route path='/Algorithm/*' element={<Algo />} />\r\n      <Route path='/DataStructure/*' element={<DataStructure />} />\r\n      <Route path='/Database/*' element={<Database />} />\r\n      <Route path='*' element={<Home />} />\r\n    </Routes>\r\n  </BrowserRouter>\r\n);","import { Component } from 'react';\nimport Router from \"./components/Router.js\";\nimport './App.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"main\">\n        <Router />\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}